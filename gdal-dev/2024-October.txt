From even.rouault at spatialys.com  Tue Oct  1 09:54:29 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 1 Oct 2024 18:54:29 +0200
Subject: [gdal-dev] RFC 102: Embedding resource files into libgdal (and PROJ)
Message-ID: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>

Hi,

Sending to both gdal-dev and proj, as this is intended to be a joint RFC.

Summary: This RFC uses C23 ``#embed`` pre-processor directive, when 
available, to be able to embed GDAL resource files directly into 
libgdal. It is also intended to be used for PROJ, in particular for its 
proj.db file.

Details: See https://github.com/OSGeo/gdal/pull/10913

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From gdt at lexort.com  Tue Oct  1 10:19:19 2024
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 01 Oct 2024 13:19:19 -0400
Subject: [gdal-dev] [PROJ] RFC 102: Embedding resource files into
 libgdal (and PROJ)
In-Reply-To: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com> (Even
 Rouault via PROJ's message of "Tue, 1 Oct 2024 18:54:29 +0200")
References: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>
Message-ID: <rmied4zoi5k.fsf@s1.lexort.com>

Even Rouault via PROJ <proj at lists.osgeo.org> writes:

> Sending to both gdal-dev and proj, as this is intended to be a joint RFC.
>
> Summary: This RFC uses C23 ``#embed`` pre-processor directive, when
> available, to be able to embed GDAL resource files directly into
> libgdal. It is also intended to be used for PROJ, in particular for
> its proj.db file.
>
> Details: See https://github.com/OSGeo/gdal/pull/10913

What's unclear is to what extent things continue to be ok on compilers
not supporting C23, and if they are, if those systems start to be second
class.    My overall feeling is that it is vastly too early to be
depending on C23.

But maybe c23 is c2x, and it's been supported in gcc for 6 years.

(I couldn't figure out any of that from the link.)

From even.rouault at spatialys.com  Tue Oct  1 10:28:28 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 1 Oct 2024 19:28:28 +0200
Subject: [gdal-dev] [PROJ] RFC 102: Embedding resource files into
 libgdal (and PROJ)
In-Reply-To: <rmied4zoi5k.fsf@s1.lexort.com>
References: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>
 <rmied4zoi5k.fsf@s1.lexort.com>
Message-ID: <aa98ed68-663b-4a8c-be45-dc2fb89293fb@spatialys.com>

Greg,
> What's unclear is to what extent things continue to be ok on compilers
> not supporting C23, and if they are, if those systems start to be second
> class.    My overall feeling is that it is vastly too early to be
> depending on C23.

The RFC is clear enough this is an optional feature ("C23 is not 
required if EMBED_RESOURCE_FILES is not enabled"). If you need it, you 
will need a C23 compiler, which there is already one available (clang 
19), and another one in a near future (gcc 15).

C23 is only used to build the .c files where resources are embedded.

If you don't need that new feature, you can use the current minimum 
build requirements of GDAL/PROJ.

For once that GDAL/PROJ can use shiny new stuff, let's enjoy :-)

>
> But maybe c23 is c2x, and it's been supported in gcc for 6 years.

No way a gcc from 6 years ago can support #embed: support has literally 
landed in GCC master 2 weeks ago.

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241001/c9663675/attachment-0001.htm>

From patrick.mckendree.young at gmail.com  Tue Oct  1 13:56:54 2024
From: patrick.mckendree.young at gmail.com (Patrick Young)
Date: Tue, 1 Oct 2024 14:56:54 -0600
Subject: [gdal-dev] Most Efficient MVT Creation
Message-ID: <CADXYQQ4P-49pmhEPA_rcTjHjgTEy4uKBgL8ze2n1csfLt0t5ow@mail.gmail.com>

Hi,

I've been playing around a little with the MVT driver and noticed in the
test suite, features are written first via the Memory driver and then
gdal.VectorTranslate is used to create the MVTs.

Is there any advantage to doing this vs writing features directly to a MVT
datasource?  From what I could tell in experimenting, when writing directly
to a MVT dataset, the driver writes all the features to a sqlite db per
tile, and then when the dataset is closed, the actual MVTs are created;
wasn't sure if there's any optimizations taken if you go through a Memory
dataset first.

Also, is there a way to create just a single MVT with the driver? I think
the answer is no (always creates all the tiles that cover the geometries)
but I might have missed an option.

Thanks!
Patrick
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241001/1875be2c/attachment.htm>

From even.rouault at spatialys.com  Tue Oct  1 14:03:37 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 1 Oct 2024 23:03:37 +0200
Subject: [gdal-dev] Most Efficient MVT Creation
In-Reply-To: <CADXYQQ4P-49pmhEPA_rcTjHjgTEy4uKBgL8ze2n1csfLt0t5ow@mail.gmail.com>
References: <CADXYQQ4P-49pmhEPA_rcTjHjgTEy4uKBgL8ze2n1csfLt0t5ow@mail.gmail.com>
Message-ID: <9339a18a-08a6-4342-863c-5f8378cf9004@spatialys.com>

Patrick,


> Is there any advantage to doing this vs writing?features directly to a 
> MVT datasource?
no there's no advantage in going through the Memory driver. Not sure why 
I did that when writing the tests.

>
> Also, is there a way to create just a single MVT with the driver? I 
> think the answer is no (always creates all the tiles that cover the 
> geometries) but I might have missed an option.

Not directly. Of course, if you clip the geometries to cover one single 
tile, you could achieve that.

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241001/bd97c5e6/attachment.htm>

From even.rouault at spatialys.com  Wed Oct  2 04:45:13 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 2 Oct 2024 13:45:13 +0200
Subject: [gdal-dev] Is it possible to create standalone DLL for OGR GML
 driver ?
In-Reply-To: <SYZP282MB318938620216C3B4862B536FD9962@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>
References: <SYZP282MB3189AF41A0C8AADA4D22D0E0D9962@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>
 <SYZP282MB318938620216C3B4862B536FD9962@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>
Message-ID: <291aefa1-76e2-4b41-a1ed-7efc8c4d3b74@spatialys.com>

Hi,


OGR_ENABLE_DRIVER_GML_PLUGIN=ON will be possible in 3.10 per 
https://github.com/OSGeo/gdal/pull/10914


Even


Le 29/08/2024 ? 09:41, Parveen Sharma via gdal-dev a ?crit?:
> Hello
>
> I am working on *Release/3.3*?branch of *GDAL*. I want to know if its 
> possible to create a standalone DLL for OGR GML driver during build of 
> GDAL itself?
>
> So far i have tried enabling below flags in my nmake.local but there 
> is no success so far.
>
>
> OGR_ENABLE_DRIVER_GML_PLUGIN = YES
> GDAL_ENABLE_PLUGINS = YES
> OGR_ENABLE_PLUGINS = YES
>
> I was wondering if there exists a way to get standalone OGR GML 
> Driver. Please suggest.
>
> Best regards,
> Parveen
>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241002/f0d2a86d/attachment.htm>

From sharma1981 at outlook.com  Wed Oct  2 05:02:08 2024
From: sharma1981 at outlook.com (Parveen Sharma)
Date: Wed, 2 Oct 2024 12:02:08 +0000
Subject: [gdal-dev] Is it possible to create standalone DLL for OGR GML
 driver ?
In-Reply-To: <291aefa1-76e2-4b41-a1ed-7efc8c4d3b74@spatialys.com>
References: <SYZP282MB3189AF41A0C8AADA4D22D0E0D9962@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>
 <SYZP282MB318938620216C3B4862B536FD9962@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>
 <291aefa1-76e2-4b41-a1ed-7efc8c4d3b74@spatialys.com>
Message-ID: <SYZP282MB3189A8EB9B71732BA804CCF7D9702@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>

Hello Even

That's great. Thanks for letting me know

Best regards
Parveen
________________________________
From: Even Rouault <even.rouault at spatialys.com>
Sent: Wednesday, October 2, 2024 7:45 PM
To: Parveen Sharma <sharma1981 at outlook.com>; gdal-dev at lists.osgeo.org <gdal-dev at lists.osgeo.org>
Subject: Re: [gdal-dev] Is it possible to create standalone DLL for OGR GML driver ?


Hi,


OGR_ENABLE_DRIVER_GML_PLUGIN=ON will be possible in 3.10 per https://github.com/OSGeo/gdal/pull/10914


Even


Le 29/08/2024 ? 09:41, Parveen Sharma via gdal-dev a ?crit :

Hello

I am working on Release/3.3 branch of GDAL. I want to know if its possible to create a standalone DLL for OGR GML driver during build of GDAL itself?

So far i have tried enabling below flags in my nmake.local but there is no success so far.


OGR_ENABLE_DRIVER_GML_PLUGIN = YES
GDAL_ENABLE_PLUGINS = YES
OGR_ENABLE_PLUGINS = YES

I was wondering if there exists a way to get standalone OGR GML Driver. Please suggest.

Best regards,
Parveen





_______________________________________________
gdal-dev mailing list
gdal-dev at lists.osgeo.org<mailto:gdal-dev at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/gdal-dev


--
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241002/54a169af/attachment.htm>

From schwehr at gmail.com  Wed Oct  2 12:03:06 2024
From: schwehr at gmail.com (Kurt Schwehr)
Date: Wed, 2 Oct 2024 12:03:06 -0700
Subject: [gdal-dev] [PROJ] RFC 102: Embedding resource files into
 libgdal (and PROJ)
In-Reply-To: <aa98ed68-663b-4a8c-be45-dc2fb89293fb@spatialys.com>
References: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>
 <rmied4zoi5k.fsf@s1.lexort.com>
 <aa98ed68-663b-4a8c-be45-dc2fb89293fb@spatialys.com>
Message-ID: <CACmBxyuvWsnPCPSwnPyvVS8YbY0VNPSQL6_4u51Ed6z3_khSSw@mail.gmail.com>

So excited for this feature. We have custom code that does stuff like this.

e.g.

+    // BEGIN GOOGLE MODIFICATION
+    int flags = SQLITE_OPEN_READONLY | SQLITE_OPEN_NOMUTEX;
     if (path.empty()) {
-        path.resize(2048);
-        const bool found =
-            pj_find_file(pjCtxt(), "proj.db", &path[0], path.size() - 1)
!= 0;
-        path.resize(strlen(path.c_str()));
-        if (!found) {
-            throw FactoryException("Cannot find proj.db");
-        }
+        static const FileToc *toc = [] {
+          // Enable the memvfs extension.
+          const int init_code = sqlite3_memvfs_init(nullptr, nullptr,
nullptr);
+          if (init_code != SQLITE_OK_LOAD_PERMANENTLY) {
+            throw FactoryException(
+                absl::StrCat("Can't initialize memvfs, with code ",
init_code));
+          }
+          // Re-register 'unix' as default filesystem. MemVFS can be used
+          // through URL parameters, or by passing as the fourth argument
to
+          // sqlite3_open_v2().
+          const int register_code =
+              sqlite3_vfs_register(sqlite3_vfs_find("unix"), /*makeDflt
=*/1);
+          if (register_code != SQLITE_OK) {
+            throw FactoryException(absl::StrCat(
+                "Can't re-register the default VFS, with code ",
init_code));
+          }
+          return proj_db_create();
+        }();
+        // Load the database from a cc_embed_file, using the memvfs
+        // extension of sqlite.
+        path =
absl::StrFormat("file:/proj?ptr=0x%x&sz=%d&max=%d&vfs=memvfs",
+                               reinterpret_cast<uintptr_t>(toc[0].data),
+                               toc[0].size, toc[0].size);
+        flags |= SQLITE_OPEN_URI;
     }
+    // END GOOGLE MODIFICATION

On Tue, Oct 1, 2024 at 10:28?AM Even Rouault via PROJ <proj at lists.osgeo.org>
wrote:

> Greg,
>
> What's unclear is to what extent things continue to be ok on compilers
> not supporting C23, and if they are, if those systems start to be second
> class.    My overall feeling is that it is vastly too early to be
> depending on C23.
>
> The RFC is clear enough this is an optional feature ("C23 is not required
> if EMBED_RESOURCE_FILES is not enabled"). If you need it, you will need a
> C23 compiler, which there is already one available (clang 19), and another
> one in a near future (gcc 15).
>
> C23 is only used to build the .c files where resources are embedded.
>
> If you don't need that new feature, you can use the current minimum build
> requirements of GDAL/PROJ.
>
> For once that GDAL/PROJ can use shiny new stuff, let's enjoy :-)
>
> But maybe c23 is c2x, and it's been supported in gcc for 6 years.
>
> No way a gcc from 6 years ago can support #embed: support has literally
> landed in GCC master 2 weeks ago.
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241002/feb0ec55/attachment.htm>

From even.rouault at spatialys.com  Thu Oct  3 10:30:53 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 3 Oct 2024 19:30:53 +0200
Subject: [gdal-dev] [PROJ] RFC 102: Embedding resource files into
 libgdal (and PROJ)
In-Reply-To: <CACmBxyuvWsnPCPSwnPyvVS8YbY0VNPSQL6_4u51Ed6z3_khSSw@mail.gmail.com>
References: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>
 <rmied4zoi5k.fsf@s1.lexort.com>
 <aa98ed68-663b-4a8c-be45-dc2fb89293fb@spatialys.com>
 <CACmBxyuvWsnPCPSwnPyvVS8YbY0VNPSQL6_4u51Ed6z3_khSSw@mail.gmail.com>
Message-ID: <e4135b06-7ea6-4fa4-8517-5397a91af49a@spatialys.com>

Hi,

I've now a PROJ branch with proj.db embedding working at 
https://github.com/OSGeo/PROJ/pull/4265. And contrary to the current 
wording of the RFC text, I've actually invested in making it work with 
non-C23 compilers too (C23 mechanism used when available), by adapting 
https://gitlab.com/jhamberg/cmake-examples/-/blob/master/cmake/FileEmbed.cmake 
and optimizing it because its performance at generating a .c file from a 
binary was not acceptable on multi-megabyte large files like proj.db.? 
Non-C23 embedding works fine with older gcc, clang, MSVC. The proj_db.c 
generation from proj.db runs in 8 seconds, and building it with gcc in 
18 seconds (looking at build times in CI, that seems to be fast with 
MSVC too)

But I won't (probably) support non-C23 embedding for GDAL: that would be 
too much complication w.r.t benefit. Only a "few" GDAL drivers need 
resource files, whereas access to proj.db is a strong requirement.

Kurt, I had to modify the memOpen() and the memvfs_init() functions of 
the https://www.sqlite.org/src/doc/tip/ext/misc/memvfs.c (I did other 
changes in memvfs_init() to avoid making it the default VFS, and 
registering it per db-connection to avoid a global registration), 
otherwise some complex SQL requests that require creating a temporary 
file wouldn't work, such as the ones of 'bin/projinfo --list-crs' or 
'bin/cct "this is a bogus CRS meant to trigger a syntax error in 
proj_create"'? (with sqlite 3.46 of fedora:rawhide). Is it something you 
ran into? Cf the changes in memvfs.c in 
https://github.com/rouault/PROJ/commit/e7fcf162f6968c48587836f537b506708112e7d4

With those changes, ctest pass

Even


http://www.spatialys.com
My software is free, but my time generally not.


From schwehr at gmail.com  Thu Oct  3 11:27:52 2024
From: schwehr at gmail.com (Kurt Schwehr)
Date: Thu, 3 Oct 2024 11:27:52 -0700
Subject: [gdal-dev] [PROJ] RFC 102: Embedding resource files into
 libgdal (and PROJ)
In-Reply-To: <e4135b06-7ea6-4fa4-8517-5397a91af49a@spatialys.com>
References: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>
 <rmied4zoi5k.fsf@s1.lexort.com>
 <aa98ed68-663b-4a8c-be45-dc2fb89293fb@spatialys.com>
 <CACmBxyuvWsnPCPSwnPyvVS8YbY0VNPSQL6_4u51Ed6z3_khSSw@mail.gmail.com>
 <e4135b06-7ea6-4fa4-8517-5397a91af49a@spatialys.com>
Message-ID: <CACmBxysMQBkUk1GjsyP7qmw+3JATGwT+6P_F=ufmTH32zpaQwQ@mail.gmail.com>

For my weird google production setup: I haven't heard of any bugs along
those lines. I only build cs2cs and gie for running tests and users have no
access to any of the proj binaries in production. I don't think folks do
much with sqlite (most db usage are things like Spanner or FireBase) and
most proj usage is pretty boring.

If they need them, they get them through debian on their desktops or
whatever cloud container they might use if they are allowed to do that, but
not in the normal production environment.

On Thu, Oct 3, 2024 at 10:30?AM Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi,
>
> I've now a PROJ branch with proj.db embedding working at
> https://github.com/OSGeo/PROJ/pull/4265. And contrary to the current
> wording of the RFC text, I've actually invested in making it work with
> non-C23 compilers too (C23 mechanism used when available), by adapting
>
> https://gitlab.com/jhamberg/cmake-examples/-/blob/master/cmake/FileEmbed.cmake
> and optimizing it because its performance at generating a .c file from a
> binary was not acceptable on multi-megabyte large files like proj.db.
> Non-C23 embedding works fine with older gcc, clang, MSVC. The proj_db.c
> generation from proj.db runs in 8 seconds, and building it with gcc in
> 18 seconds (looking at build times in CI, that seems to be fast with
> MSVC too)
>
> But I won't (probably) support non-C23 embedding for GDAL: that would be
> too much complication w.r.t benefit. Only a "few" GDAL drivers need
> resource files, whereas access to proj.db is a strong requirement.
>
> Kurt, I had to modify the memOpen() and the memvfs_init() functions of
> the https://www.sqlite.org/src/doc/tip/ext/misc/memvfs.c (I did other
> changes in memvfs_init() to avoid making it the default VFS, and
> registering it per db-connection to avoid a global registration),
> otherwise some complex SQL requests that require creating a temporary
> file wouldn't work, such as the ones of 'bin/projinfo --list-crs' or
> 'bin/cct "this is a bogus CRS meant to trigger a syntax error in
> proj_create"'  (with sqlite 3.46 of fedora:rawhide). Is it something you
> ran into? Cf the changes in memvfs.c in
>
> https://github.com/rouault/PROJ/commit/e7fcf162f6968c48587836f537b506708112e7d4
>
> With those changes, ctest pass
>
> Even
>
>
> http://www.spatialys.com
> My software is free, but my time generally not.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241003/6900bc14/attachment.htm>

From howard at hobu.co  Thu Oct  3 11:46:02 2024
From: howard at hobu.co (Howard Butler)
Date: Thu, 3 Oct 2024 13:46:02 -0500
Subject: [gdal-dev] GDAL Maintainers Meeting Minutes
Message-ID: <04F98D82-FCD7-4F96-B652-CE23F401DDF5@hobu.co>

Howard Butler, Even Rouault, Dan Baston, Alessandro Pasotti, Michael Sumner, and Javier Jimenez Shaw held the monthly GDAL Maintainers Meeting on 09/26/2024. The following items were discussed and reported upon:

Discussion Items
----------------------------

* Two bronze sponsors have declined to renew for this year. If your organization depends upon GDAL, and you value the efforts of the GDAL Sponsorship Program for maintenance of the project, please continue to advocate for your organization's sponsorship of the project. Sponsors will necessarily come and go, but sustainment of the GDAL Sponsorship Program depends on users advocating the need and value of their organization's participation in it.
* GDAL TracWiki is dead. If there was a resource you used there you can't find in the existing website or GitHub space, please file a ticket with a link to the wayback machine and we will make sure to pull it back from the ice age.
* A discussion about whether or not libkml maintenance should fall under purview of GDAL maintenance activity. If libkml usage is a high priority for your organization, please reach out directly to Even.
 
Maintenance activities update
------------------------------------------

Alessandro

* PR reviews
* More ArgParse implementation, specifically gdal_rasterize
* Investigation of gdal_contour behavior change https://github.com/OSGeo/gdal/issues/10854

Dan

* RTD migration is now complete! Some follow-on work that might continue there is to backport some older doc versions for availability on the website, but that is not slated for implementation at this time.
* Significant Python bindings ReadAsArray Numpy performance improvement
* gdalwarp behavior investigation and documentation
* discussion about simplification and consolidation of gdalwarp code

Even

* 110+ tickets of activity and review
* Addition of a CI check of final GDAL tarball to ensure unexpected binaries are not added to release output
* Additional gdalcolor interpretations and enumerations
* RFC 101 Thread safe GDAL raster dataset reading
* VSIMem "random" filename generation
* Enhancement of build configuration modularity, including the ability to disable *every* driver if desired (MEM only!)
* Spite-driven development of libertiff, a header-only TIFF C++ library https://github.com/libertiff/libertiff/ 
* libtiff 4.7.0
* New EMBED_RESOURCE_FILES CMake configuration to take advantage of if-available C++23 compiler support for embedding GDAL_DATA and (eventually) PROJ_DATA content directly into the build
* Significant performance improvement using column API for some ogr2ogr reprojection activities

Javier

* Discussion about templatization of interpolation to adapt eigen-like behavior https://github.com/OSGeo/gdal/pull/10744
* Google juice of spatialreference.org <http://spatialreference.org/> is improving. It is now #2 for most queries. It is #1 for being the most the up-to-date, no ads, no-fuss, and easy-to-consume spatial reference definitions website in the world :)

Michael

* Discussion about pangeo/xarray, adaptation of GDAL's warper in other contexts, and "lazy coordinate" consumption

Howard

The next GDAL Maintainers Meeting is 10/24/2024 at 13:00 UTC. Any GDAL PR contributors are welcome to join by reaching out to me for an invite.

Howard

From P.OToole at uwyo.edu  Thu Oct  3 16:18:11 2024
From: P.OToole at uwyo.edu (P O'Toole)
Date: Thu, 3 Oct 2024 23:18:11 +0000
Subject: [gdal-dev] libkml: providing more information about builds that
 include LIBKML to steer users away from security pitfalls and questions for
 packagers who may build with libkml
Message-ID: <CY4PR05MB3398ACB4BB50372717C76801F8762@CY4PR05MB3398.namprd05.prod.outlook.com>

Hello list ?

I recently built GDAL 3.9.0 from source on a new Amazon Linux 2023 system, which sadly lacks all of the wonderfulness of EPEL, which previously provided most of the necessary stuff on the RHEL-family operating systems we used before. Since we've historically provided support for exporting KML in our web applications, I concluded I ought to build the libkml dependency during the process, which is where the fun started...

GDAL's documentation page ( https://gdal.org/en/latest/drivers/vector/libkml.html#vector-libkml ) says to use the latest libkml release (version 1.3.0, a 2015 vintage) or build from master (currently commit 916a801, a 2017 vintage). The libkml release makefiles have instructions to grab various (old) release packages from hardcoded web-URLs and silently build and install(!!) them without asking if this is okay or suggesting that the latest packages be made available by the user. Some breakage led me to have a closer look and I found that a failing dependency was the result of a dead hard-coded URL pointing to a URIparser 0.7.5 release, which has had known vulnerabilities since 2018 ( https://www.cvedetails.com/version/1531247/Uriparser-Project-Uriparser-0.7.5.html ). The URIparser maintainer very nicely added warnings to that release, directing people to upgrade for security reasons. More looking around from there showed that minizip 1.3.0 also has issues ( https://www.cvedetails.com/vulnerability-list/vendor_id-17534/product_id-43048/version_id-1233835/Minizip-Project-Minizip-1.1-4.html ), as does boost 1.50.0 (https://www.cvedetails.com/vulnerability-list/vendor_id-7685/product_id-13033/version_id-499391/Boost-Boost-1.50.0.html) alongside expat 2.1.0 (https://www.cvedetails.com/version/1175174/Libexpat-Project-Libexpat-2.1.0.html) and zlib 1.2.8 (https://www.cvedetails.com/version/1618219/Zlib-Zlib-1.2.8.html). Though other dependencies won't be downloaded on libkml master 916a801, I believe boost 1.50.0 will still automatically be downloaded and built if another version cannot be found locally, at least in some cases.

For folks just looking to build gdal as a dependency for something else e.g. GEOS or PostGIS, I think it would be easy overlook the above issues. As such, I'd argue that the documentation on gdal.org that relates to libkml should be adjusted to note that users building libkml should take care to make its dependencies available locally before it (the 1.3.0 package especially and to a lesser degree the latest commit of their main branch) goes and downloads vulnerable packages and installs them without asking.

Obviously, GDALers aren't directly responsible for libkml (at least at this time) and the cleanest fix here lies on the libkml end, wherein they'd post a new release and likely freshen master slightly, ideally testing it against newer versions of the required dependencies. Of course, this will likely take time, so in the meanwhile, it might be nice for GDAL's documentation to reflect the reality that building with full KML features should be done carefully to avoid opening applications (and/or the users of those applications) to attack via carefully-constructed KML-files which could be used to perform malicious actions, modify an application to attack its users, etc.

My question for anyone distributing pre-compiled versions of GDAL via package repositories (e.g. EPEL) or other mechanisms is whether they are aware of these issues, at least if they are building with full KML support via libkml. I take it they likely ARE aware, given libkml was discussed at the last maintainer meeting, but it behooves me to be sure.

-  Patrick O'Toole

P.S. I may not be of great use in terms of coding on this issue, as my C++ is not very current and I don't have familiarity with the relevant internals, but I would be happy to contribute documentation as it relates to the libkml driver and how to build it for use with modern versions of GDAL. I may also be able to support some testing if there's action taken here.

P.P.S. I am explicitly including Even because the maintainers-meeting summary asked that LIBKML-users make comment to Even... Some review of conversations relating to the filetypes my group currently supports reveals that a tool called OnX that's used by some of our biologists is compatible with KML, which makes it nice to have the option to export data to KML format. In addition, we sometimes work with partners from other organizations who use Google Earth to visualize geospatial features, because ArcGIS is expensive and QGIS is either not known or too cumbersome to learn or open for lighter tasks such as simply viewing data. For these reasons, I concluded that having libkml might be better than only GDAL's internal KML driver, although I have not done side-by-side comparisons to see which features or options work better on one driver versus the other for output, so I will refrain from making the strong statement, "We must have libkml and I know this for a fact." Hope that helps.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241003/626077b9/attachment.htm>

From simon.eves at heavy.ai  Thu Oct  3 16:47:46 2024
From: simon.eves at heavy.ai (Simon Eves)
Date: Thu, 3 Oct 2024 16:47:46 -0700
Subject: [gdal-dev] libkml: providing more information about builds that
 include LIBKML to steer users away from security pitfalls and questions for
 packagers who may build with libkml
In-Reply-To: <CY4PR05MB3398ACB4BB50372717C76801F8762@CY4PR05MB3398.namprd05.prod.outlook.com>
References: <CY4PR05MB3398ACB4BB50372717C76801F8762@CY4PR05MB3398.namprd05.prod.outlook.com>
Message-ID: <CAJf0KTRSgUCgXAm32GOs13LRKYwadtT+dzsNQm4N9ZEZymodeA@mail.gmail.com>

We include *libkml* in our GDAL build. We are still using v1.3.0 from
August 12, 2015. It still works fine for our requirements with GDAL 3.7.3
(current production) and 3.9.2 (imminent deps bump).

The build script for it predates me, but it appears we also had issues with
*uriparser*. We build that (v0.9.8) separately (pretty much stock) and then
hack the *libkml* build to use it in preference, as follows:

unzip -u libkml-master.zip
cd libkml-master
# Don't use bundled third_party uriparser.
# It results in duplicate symbols when linking some of our tests,
# and is missing symbols used by arrow because it is an old version.
rm -Rf third_party/uriparser-*
find . -name Makefile.am -exec sed -i 's/ liburiparser\.la//' {} +
find . -name Makefile.am -exec sed -i '/uriparser/d' {} +
# Delete trailing backslashes that precede a blank line left from prior
command.
find . -name Makefile.am -exec sed -iE ':a;N;$!ba;s/\\\n\s*$/\n/m' {} +
./autogen.sh
CURL_CONFIG=$PREFIX/bin/curl-config \
CXXFLAGS="-std=c++03" \
LDFLAGS="-L$PREFIX/lib -luriparser" \
./configure --with-expat-include-dir=$PREFIX/include/
--with-expat-lib-dir=$PREFIX/lib --prefix=$PREFIX --enable-static
--disable-java --disable-python --disable-swig
makej
make install

Of the other deps you mentioned, we are using *expat* 2.6.2 (prompted by a
Python 3.12 and *gdb* issue on Ubuntu 24.04) and *boost* 1.84. We don't
seem to include *minizip* explicitly. We build with system *zlib*.

Maybe this is helpful. Maybe not. This is all on Linux (we do both RHEL and
Ubuntu builds).

On Thu, Oct 3, 2024 at 4:18?PM P O'Toole via gdal-dev <
gdal-dev at lists.osgeo.org> wrote:

> Hello list ?
>
> I recently built GDAL 3.9.0 from source on a new Amazon Linux 2023 system,
> which sadly lacks all of the wonderfulness of EPEL, which previously
> provided most of the necessary stuff on the RHEL-family operating systems
> we used before. Since we've historically provided support for exporting KML
> in our web applications, I concluded I ought to build the libkml dependency
> during the process, which is where the fun started...
>
> GDAL's documentation page (
> https://gdal.org/en/latest/drivers/vector/libkml.html#vector-libkml )
> says to use the latest libkml release (version 1.3.0, a 2015 vintage) or
> build from master (currently commit 916a801, a 2017 vintage). The libkml
> release makefiles have instructions to grab various (old) release packages
> from hardcoded web-URLs and silently build and install(!!) them without
> asking if this is okay or suggesting that the latest packages be made
> available by the user. Some breakage led me to have a closer look and I
> found that a failing dependency was the result of a dead hard-coded URL
> pointing to a URIparser 0.7.5 release, which has had known vulnerabilities
> since 2018 (
> https://www.cvedetails.com/version/1531247/Uriparser-Project-Uriparser-0.7.5.html ).
> The URIparser maintainer very nicely added warnings to that release,
> directing people to upgrade for security reasons. More looking around from
> there showed that minizip 1.3.0 also has issues (
> https://www.cvedetails.com/vulnerability-list/vendor_id-17534/product_id-43048/version_id-1233835/Minizip-Project-Minizip-1.1-4.html ),
> as does boost 1.50.0 (
> https://www.cvedetails.com/vulnerability-list/vendor_id-7685/product_id-13033/version_id-499391/Boost-Boost-1.50.0.html)
> alongside expat 2.1.0 (
> https://www.cvedetails.com/version/1175174/Libexpat-Project-Libexpat-2.1.0.html)
> and zlib 1.2.8 (
> https://www.cvedetails.com/version/1618219/Zlib-Zlib-1.2.8.html). Though
> other dependencies won't be downloaded on libkml master 916a801, I believe
> boost 1.50.0 will still automatically be downloaded and built if another
> version cannot be found locally, at least in some cases.
>
> For folks just looking to build gdal as a dependency for something else
> e.g. GEOS or PostGIS, I think it would be easy overlook the above issues.
> As such, I'd argue that the documentation on gdal.org that relates to
> libkml should be adjusted to note that users building libkml should take
> care to make its dependencies available locally before it (the 1.3.0
> package especially and to a lesser degree the latest commit of their main
> branch) goes and downloads vulnerable packages and installs them without
> asking.
>
> Obviously, GDALers aren't directly responsible for libkml (at least at
> this time) and the cleanest fix here lies on the libkml end, wherein they'd
> post a new release and likely freshen master slightly, ideally testing it
> against newer versions of the required dependencies. Of course, this will
> likely take time, so in the meanwhile, it might be nice for GDAL's
> documentation to reflect the reality that building with full KML features
> should be done carefully to avoid opening applications (and/or the users of
> those applications) to attack via carefully-constructed KML-files which
> could be used to perform malicious actions, modify an application to attack
> its users, etc.
>
> My question for anyone distributing pre-compiled versions of GDAL via
> package repositories (e.g. EPEL) or other mechanisms is whether they are
> aware of these issues, at least if they are building with full KML support
> via libkml. I take it they likely ARE aware, given libkml was discussed at
> the last maintainer meeting, but it behooves me to be sure.
>
> -  Patrick O'Toole
>
> P.S. I may not be of great use in terms of coding on this issue, as my C++
> is not very current and I don't have familiarity with the relevant
> internals, but I would be happy to contribute documentation as it relates
> to the libkml driver and how to build it for use with modern versions of
> GDAL. I may also be able to support some testing if there's action taken
> here.
>
> P.P.S. I am explicitly including Even because the maintainers-meeting
> summary asked that LIBKML-users make comment to Even... Some review of
> conversations relating to the filetypes my group currently supports reveals
> that a tool called OnX that's used by some of our biologists is compatible
> with KML, which makes it nice to have the option to export data to KML
> format. In addition, we sometimes work with partners from other
> organizations who use Google Earth to visualize geospatial features,
> because ArcGIS is expensive and QGIS is either not known or too cumbersome
> to learn or open for lighter tasks such as simply viewing data. For these
> reasons, I concluded that having libkml might be better than only GDAL's
> internal KML driver, although I have not done side-by-side comparisons to
> see which features or options work better on one driver versus the other
> for output, so I will refrain from making the strong statement, "We must
> have libkml and I know this for a fact." Hope that helps.
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241003/da6ee18a/attachment-0001.htm>

From even.rouault at spatialys.com  Fri Oct  4 07:57:24 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 4 Oct 2024 16:57:24 +0200
Subject: [gdal-dev] libkml: providing more information about builds that
 include LIBKML to steer users away from security pitfalls and questions for
 packagers who may build with libkml
In-Reply-To: <CAJf0KTRSgUCgXAm32GOs13LRKYwadtT+dzsNQm4N9ZEZymodeA@mail.gmail.com>
References: <CY4PR05MB3398ACB4BB50372717C76801F8762@CY4PR05MB3398.namprd05.prod.outlook.com>
 <CAJf0KTRSgUCgXAm32GOs13LRKYwadtT+dzsNQm4N9ZEZymodeA@mail.gmail.com>
Message-ID: <a3bc9ed4-69b5-402f-8866-c701732063cf@spatialys.com>

Hi,

My thought would be that a few people (at least 2 as being a sole 
maintainer isn't a good idea) from the community would stand up and act 
as the new keepers of libkml. I guess we could host it at OSGeo/libkml 
because I'm not optimistic we can recover libkml/libkml. A few years ago 
I tried to contact its past maintainer (https://github.com/rashadkm) but 
he seems to have disappeared from github (at least @ pings were ineffective)

Functionally I believe libkml is feature-full or close to be. So this is 
"just" about maintenance. Existing pull requests to review. Patches 
hanging around here and there (like at 
https://github.com/conda-forge/libkml-feedstock/tree/main/recipe/patches), 
that should be worth exploring upstreaming. Possibly fixes & 
enhancements in its CMake build system?

Howard mentioned me as a POC because I raised the topic, but I'm not 
super willing to act as the primary maintainer of libkml, filling 
already that role too many times.

So another opportunity for the community to stand up, otherwise each 
interested party will have the miserable experience of acting separately 
as a maintainer, and probably we'll finally get into the situation where 
the thing is not usable anymore (it started causing issues for 
conda-forge builds some time ago, and they were considering dropping it)

@SimonEves I was confused by your mention of autogen.sh and stuff. I 
presume you're still using google/libkml. You'd probably have a slightly 
better experience with libkml/libkml which has only a CMake build system.

@Peter You're welcome to submit a PR enhancing GDAL libkml driver doc.

Even


Le 04/10/2024 ? 01:47, Simon Eves a ?crit?:
> We include *libkml* in our GDAL build. We are still using v1.3.0 from 
> August 12, 2015. It still works fine for our requirements with GDAL 
> 3.7.3 (current production) and 3.9.2 (imminent deps bump).
>
> The build script for it predates me, but it appears we also had issues 
> with *uriparser*. We build that (v0.9.8) separately (pretty much 
> stock) and then hack the *libkml* build to use it in preference, as 
> follows:
>
> unzip -u libkml-master.zip
> cd libkml-master
> # Don't use bundled third_party uriparser.
> # It results in duplicate symbols when linking some of our tests,
> # and is missing symbols used by arrow because it is an old version.
> rm -Rf third_party/uriparser-*
> find . -name Makefile.am -exec sed -i 's/ liburiparser\.la//' {} +
> find . -name Makefile.am -exec sed -i '/uriparser/d' {} +
> # Delete trailing backslashes that precede a blank line left from 
> prior command.
> find . -name Makefile.am -exec sed -iE ':a;N;$!ba;s/\\\n\s*$/\n/m' {} +
> ./autogen.sh
> CURL_CONFIG=$PREFIX/bin/curl-config \
> CXXFLAGS="-std=c++03" \
> LDFLAGS="-L$PREFIX/lib -luriparser" \
> ./configure --with-expat-include-dir=$PREFIX/include/ 
> --with-expat-lib-dir=$PREFIX/lib --prefix=$PREFIX --enable-static 
> --disable-java --disable-python --disable-swig
> makej
> make install
>
> Of the other deps you mentioned, we are using *expat* 2.6.2 (prompted 
> by a Python 3.12 and *gdb* issue on Ubuntu 24.04) and *boost* 1.84. We 
> don't seem to include *minizip* explicitly. We build with system *zlib*.
>
> Maybe this is helpful. Maybe not. This is all on Linux (we do both 
> RHEL and Ubuntu builds).
>
> On Thu, Oct 3, 2024 at 4:18?PM P O'Toole via gdal-dev 
> <gdal-dev at lists.osgeo.org> wrote:
>
>     Hello list ?
>
>     I recently built GDAL 3.9.0 from source on a new Amazon Linux 2023
>     system, which sadly lacks all of the wonderfulness of EPEL, which
>     previously provided most of the necessary stuff on the RHEL-family
>     operating systems we used before. Since we've historically
>     provided support for exporting KML in our web applications, I
>     concluded I ought to build the libkml dependency during the
>     process, which is where the fun started...
>
>     GDAL's documentation page (
>     https://gdal.org/en/latest/drivers/vector/libkml.html#vector-libkml?)
>     says to use the latest libkml release (version 1.3.0, a 2015
>     vintage) or build from master (currently commit 916a801, a 2017
>     vintage). The libkml release makefiles have instructions to grab
>     various (old) release packages from hardcoded web-URLs and
>     silently build and install(!!) them without asking if this is okay
>     or suggesting that the latest packages be made available by the
>     user. Some breakage led me to have a closer look and I found that
>     a failing dependency was the result of a dead hard-coded URL
>     pointing to a URIparser 0.7.5 release, which has had known
>     vulnerabilities since 2018 (
>     https://www.cvedetails.com/version/1531247/Uriparser-Project-Uriparser-0.7.5.html?).
>     The URIparser maintainer very nicely added warnings to that
>     release, directing people to upgrade for security reasons. More
>     looking around from there showed that minizip 1.3.0 also has
>     issues (
>     https://www.cvedetails.com/vulnerability-list/vendor_id-17534/product_id-43048/version_id-1233835/Minizip-Project-Minizip-1.1-4.html?),
>     as does boost 1.50.0
>     (https://www.cvedetails.com/vulnerability-list/vendor_id-7685/product_id-13033/version_id-499391/Boost-Boost-1.50.0.html)
>     alongside expat 2.1.0
>     (https://www.cvedetails.com/version/1175174/Libexpat-Project-Libexpat-2.1.0.html)
>     and zlib 1.2.8
>     (https://www.cvedetails.com/version/1618219/Zlib-Zlib-1.2.8.html).
>     Though other dependencies won't be downloaded on libkml master
>     916a801, I believe boost 1.50.0 will still automatically be
>     downloaded and built if another version cannot be found locally,
>     at least in some cases.
>
>     For folks just looking to build gdal as a dependency for something
>     else e.g. GEOS or PostGIS, I think it would be easy overlook the
>     above issues. As such, I'd argue that the documentation on
>     gdal.org <http://gdal.org> that relates to libkml should be
>     adjusted to note that users building libkml should take care to
>     make its dependencies available locally before it (the 1.3.0
>     package especially and to a lesser degree the latest commit of
>     their main branch) goes and downloads vulnerable packages and
>     installs them without asking.
>
>     Obviously, GDALers aren't directly responsible for libkml (at
>     least at this time) and the cleanest fix here lies on the libkml
>     end, wherein they'd post a new release and likely freshen master
>     slightly, ideally testing it against newer versions of the
>     required dependencies. Of course, this will likely take time, so
>     in the meanwhile, it might be nice for GDAL's documentation to
>     reflect the reality that building with full KML features should be
>     done carefully to avoid opening applications (and/or the users of
>     those applications) to attack via carefully-constructed KML-files
>     which could be used to perform malicious actions, modify an
>     application to attack its users, etc.
>
>     My question for anyone distributing pre-compiled versions of GDAL
>     via package repositories (e.g. EPEL) or other mechanisms is
>     whether they are aware of these issues, at least if they are
>     building with full KML support via libkml. I take it they likely
>     ARE aware, given libkml was discussed at the last maintainer
>     meeting, but it behooves me to be sure.
>
>     -? Patrick O'Toole
>
>     P.S. I may not be of great use in terms of coding on this issue,
>     as my C++ is not very current and I don't have familiarity with
>     the relevant internals, but I would be happy to contribute
>     documentation as it relates to the libkml driver and how to build
>     it for use with modern versions of GDAL. I may also be able to
>     support some testing if there's action taken here.
>
>     P.P.S. I am explicitly including Even because the
>     maintainers-meeting summary asked that LIBKML-users make comment
>     to Even... Some review of conversations relating to the filetypes
>     my group currently supports reveals that a tool called OnX that's
>     used by some of our biologists is compatible with KML, which makes
>     it nice to have the option to export data to KML format. In
>     addition, we sometimes work with partners from other organizations
>     who use Google Earth to visualize geospatial features, because
>     ArcGIS is expensive and QGIS is either not known or too cumbersome
>     to learn or open for lighter tasks such as simply viewing data.
>     For these reasons, I concluded that having libkml might be better
>     than only GDAL's internal KML driver, although I have not done
>     side-by-side comparisons to see which features or options work
>     better on one driver versus the other for output, so I will
>     refrain from making the strong statement, "We must have libkml and
>     I know this for a fact." Hope that helps.
>     _______________________________________________
>     gdal-dev mailing list
>     gdal-dev at lists.osgeo.org
>     https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241004/35836cf6/attachment.htm>

From simon.eves at heavy.ai  Fri Oct  4 09:21:18 2024
From: simon.eves at heavy.ai (Simon Eves)
Date: Fri, 4 Oct 2024 09:21:18 -0700
Subject: [gdal-dev] libkml: providing more information about builds that
 include LIBKML to steer users away from security pitfalls and questions for
 packagers who may build with libkml
In-Reply-To: <a3bc9ed4-69b5-402f-8866-c701732063cf@spatialys.com>
References: <CY4PR05MB3398ACB4BB50372717C76801F8762@CY4PR05MB3398.namprd05.prod.outlook.com>
 <CAJf0KTRSgUCgXAm32GOs13LRKYwadtT+dzsNQm4N9ZEZymodeA@mail.gmail.com>
 <a3bc9ed4-69b5-402f-8866-c701732063cf@spatialys.com>
Message-ID: <CAJf0KTQ7GBbp+AbqowAm5H+5MOoq0bfUsyNVTTGTiW5svGor5w@mail.gmail.com>

Even Rouault <even.rouault at spatialys.com> wrote:

> @SimonEves I was confused by your mention of autogen.sh and stuff. I
> presume you're still using google/libkml. You'd probably have a slightly
> better experience with libkml/libkml which has only a CMake build system.
>
Thanks. I'll pass that on.

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241004/f1578d31/attachment-0001.htm>

From landa.martin at gmail.com  Fri Oct  4 13:55:21 2024
From: landa.martin at gmail.com (Martin Landa)
Date: Fri, 4 Oct 2024 22:55:21 +0200
Subject: [gdal-dev] Python API: Geometry.Buffer with JOIN_STYLE
Message-ID: <CA+Ei1OcoM3941ZnvRPF+eEfwDehHRsjzvCRV6LDuG7piH_MbUw@mail.gmail.com>

Hi all,

in the documentation [1] is mentioned:

"""
Buffer(Geometry self, double distance, char ** options)? Geometry
"""

where the options argument points to [2]. But

"""
geom.Buffer(6, options=["JOIN_STYLE=MITRE"])
"""

fails with

"""
  File "/usr/lib/python3.11/site-packages/osgeo/ogr.py", line 6350, in
Buffer
    return _ogr.Geometry_Buffer(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: 'options' is an invalid keyword argument for Geometry_Buffer()
"""

So is there any possibility to use OGR_G_BufferEx's options in the Python
API?

Thanks a lot for your help, Martin

[1] https://gdal.org/en/latest/api/python/vector_api.html#osgeo.ogr.Geometry
[2]
https://gdal.org/en/latest/api/vector_c_api.html#_CPPv414OGR_G_BufferEx12OGRGeometryHd12CSLConstList

-- 
Martin Landa
https://geomatics.fsv.cvut.cz/en/employees/martin-landa/
http://gismentors.cz/mentors/landa
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241004/d41c5070/attachment.htm>

From bdezonia at gmail.com  Fri Oct  4 14:06:34 2024
From: bdezonia at gmail.com (Barry DeZonia)
Date: Fri, 4 Oct 2024 16:06:34 -0500
Subject: [gdal-dev] Python API: Geometry.Buffer with JOIN_STYLE
In-Reply-To: <CA+Ei1OcoM3941ZnvRPF+eEfwDehHRsjzvCRV6LDuG7piH_MbUw@mail.gmail.com>
References: <CA+Ei1OcoM3941ZnvRPF+eEfwDehHRsjzvCRV6LDuG7piH_MbUw@mail.gmail.com>
Message-ID: <CAKcvfuSoxYdSb-EEFeRRc_szhW53AKvTriXbGKBRbS9=N3U8Mw@mail.gmail.com>

I don't know a lot about gdal but what if your call was just:

geom.Buffer(6, ["JOIN_STYLE=MITRE"])

On Fri, Oct 4, 2024 at 3:55?PM Martin Landa via gdal-dev <
gdal-dev at lists.osgeo.org> wrote:

> Hi all,
>
> in the documentation [1] is mentioned:
>
> """
> Buffer(Geometry self, double distance, char ** options)? Geometry
> """
>
> where the options argument points to [2]. But
>
> """
> geom.Buffer(6, options=["JOIN_STYLE=MITRE"])
> """
>
> fails with
>
> """
>   File "/usr/lib/python3.11/site-packages/osgeo/ogr.py", line 6350, in
> Buffer
>     return _ogr.Geometry_Buffer(self, *args, **kwargs)
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> TypeError: 'options' is an invalid keyword argument for Geometry_Buffer()
> """
>
> So is there any possibility to use OGR_G_BufferEx's options in the Python
> API?
>
> Thanks a lot for your help, Martin
>
> [1]
> https://gdal.org/en/latest/api/python/vector_api.html#osgeo.ogr.Geometry
> [2]
> https://gdal.org/en/latest/api/vector_c_api.html#_CPPv414OGR_G_BufferEx12OGRGeometryHd12CSLConstList
>
> --
> Martin Landa
> https://geomatics.fsv.cvut.cz/en/employees/martin-landa/
> http://gismentors.cz/mentors/landa
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241004/3b2ab058/attachment.htm>

From even.rouault at spatialys.com  Fri Oct  4 14:59:01 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 4 Oct 2024 23:59:01 +0200
Subject: [gdal-dev] Python API: Geometry.Buffer with JOIN_STYLE
In-Reply-To: <CAKcvfuSoxYdSb-EEFeRRc_szhW53AKvTriXbGKBRbS9=N3U8Mw@mail.gmail.com>
References: <CA+Ei1OcoM3941ZnvRPF+eEfwDehHRsjzvCRV6LDuG7piH_MbUw@mail.gmail.com>
 <CAKcvfuSoxYdSb-EEFeRRc_szhW53AKvTriXbGKBRbS9=N3U8Mw@mail.gmail.com>
Message-ID: <d10e17a9-4ca5-4e2c-97d6-bf6c59c8ba20@spatialys.com>


Le 04/10/2024 ? 23:06, Barry DeZonia via gdal-dev a ?crit?:
> I don't know a lot about gdal but what if your call was just:
>
> geom.Buffer(6, ["JOIN_STYLE=MITRE"])

Yes, or using a dict. Cf 
https://github.com/OSGeo/gdal/blob/f1f750e1b25cfe22f2b2ce4795ee459beb3fa8d8/autotest/ogr/ogr_geom.py#L4711

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241004/8d225692/attachment.htm>

From sean.gillies at gmail.com  Sat Oct  5 15:38:14 2024
From: sean.gillies at gmail.com (Sean Gillies)
Date: Sat, 5 Oct 2024 16:38:14 -0600
Subject: [gdal-dev] What are vector field width and precision good for?
Message-ID: <CAOodmJo26kYqC=M_3PHNJwzK=3Q0UdjLDZKxJg0JwwkNW5774A@mail.gmail.com>

Hi all,

What are vector field width and precision good for in 2024? These concepts
were inherited from MS Access via Shapefile, I believe. I've been wondering
if I can stop supporting them in my Fiona project without breaking
workflows badly. Numpy data types don't have width and precision. Neither
do, for example, Parquet and Arrow.

Anybody using these for anything crucial?

-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241005/1495d2c5/attachment.htm>

From even.rouault at spatialys.com  Sat Oct  5 15:48:09 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 6 Oct 2024 00:48:09 +0200
Subject: [gdal-dev] What are vector field width and precision good for?
In-Reply-To: <CAOodmJo26kYqC=M_3PHNJwzK=3Q0UdjLDZKxJg0JwwkNW5774A@mail.gmail.com>
References: <CAOodmJo26kYqC=M_3PHNJwzK=3Q0UdjLDZKxJg0JwwkNW5774A@mail.gmail.com>
Message-ID: <bcdc66c7-6002-41c3-96bb-0498e2c738ba@spatialys.com>

Sean,

> What are vector field width and precision good for in 2024? These 
> concepts were inherited from MS Access via Shapefile, I believe. I've 
> been wondering if I can stop supporting them in my Fiona project 
> without breaking workflows badly. Numpy data types don't have width 
> and precision. Neither do, for example, Parquet and Arrow.
>
> Anybody using these for anything crucial?

If Fiona had only a read side you could likely ignore them.? But writing 
all those formats (shapefile, mapinfo, etc.) require setting those 
properties. If you don't specify them, the OGR drivers will use some 
defaults, that might not always be appropriate.

Even

-- 

http://www.spatialys.com
My software is free, but my time generally not.


From sean.gillies at gmail.com  Sat Oct  5 16:32:18 2024
From: sean.gillies at gmail.com (Sean Gillies)
Date: Sat, 5 Oct 2024 17:32:18 -0600
Subject: [gdal-dev] What are vector field width and precision good for?
In-Reply-To: <bcdc66c7-6002-41c3-96bb-0498e2c738ba@spatialys.com>
References: <CAOodmJo26kYqC=M_3PHNJwzK=3Q0UdjLDZKxJg0JwwkNW5774A@mail.gmail.com>
 <bcdc66c7-6002-41c3-96bb-0498e2c738ba@spatialys.com>
Message-ID: <CAOodmJocW4yVShE_yacvUMFyLfo04p0oToB+Zzoevt1AsZJr0w@mail.gmail.com>

Even,

Would the defaults result in overly large attribute files? By a small
amount or an excessive amount? Or would the defaults result in truncation
of values?

On Sat, Oct 5, 2024 at 4:48?PM Even Rouault <even.rouault at spatialys.com>
wrote:

> Sean,
>
> > What are vector field width and precision good for in 2024? These
> > concepts were inherited from MS Access via Shapefile, I believe. I've
> > been wondering if I can stop supporting them in my Fiona project
> > without breaking workflows badly. Numpy data types don't have width
> > and precision. Neither do, for example, Parquet and Arrow.
> >
> > Anybody using these for anything crucial?
>
> If Fiona had only a read side you could likely ignore them.  But writing
> all those formats (shapefile, mapinfo, etc.) require setting those
> properties. If you don't specify them, the OGR drivers will use some
> defaults, that might not always be appropriate.
>
> Even
>


-- 
Sean Gillies
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241005/b4c449ad/attachment.htm>

From even.rouault at spatialys.com  Sun Oct  6 02:19:35 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 6 Oct 2024 11:19:35 +0200
Subject: [gdal-dev] What are vector field width and precision good for?
In-Reply-To: <CAOodmJocW4yVShE_yacvUMFyLfo04p0oToB+Zzoevt1AsZJr0w@mail.gmail.com>
References: <CAOodmJo26kYqC=M_3PHNJwzK=3Q0UdjLDZKxJg0JwwkNW5774A@mail.gmail.com>
 <bcdc66c7-6002-41c3-96bb-0498e2c738ba@spatialys.com>
 <CAOodmJocW4yVShE_yacvUMFyLfo04p0oToB+Zzoevt1AsZJr0w@mail.gmail.com>
Message-ID: <a4668df8-5d70-49fe-be5a-f57ee09980bf@spatialys.com>

Sean,
>
> Would the defaults result in overly large attribute files? By a small 
> amount or an excessive amount? Or would the defaults result in 
> truncation of values?

For shapefile the default is width=24,precision=15,so this means 24 
bytes for every floating point number. In theory a number couldn't have 
a magnitude larger than 10^(24-15-1), but the shapefile driver will 
remove decimal figures if that's needed to preserve the integer part. 
But if a number is larger than 10^24, its last digits will just be 
truncated with a warning (there's no good solution here. I kind of 
remember of past discussions if we shouldn't fallback to scientific 
notation, but we didn't implement that). In that situation, the user 
would have to increase the width (one can question the appropriateness 
of using Shapefile .dbf for numbers of very large magnitude). So 
basically the default should be fine (as far as preserving information 
is concerned) for most common ranges of floating point numbers, but will 
misbehave for very large ones. Obviously for people storing small 
numbers with few decimals, 24 might be felt as excessive.

For MapInfo I was actually partially incorrect. It has indeed a mode of 
fixed precision, but if you don't specify the width, it uses IEEE754 
double precision for .tab, et a non-fixed width text representation for 
.mif.

Shapefiles are (probably) the only format OGR handles on the writing 
side that require, explicit or implict, width.precision (PostGIS or 
other databases are similar to MapInfo and support both fixed 
width/precision and floating-point)

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From sharma1981 at outlook.com  Mon Oct  7 00:11:10 2024
From: sharma1981 at outlook.com (Parveen Sharma)
Date: Mon, 7 Oct 2024 07:11:10 +0000
Subject: [gdal-dev] Build GDAL release/3.9 with HDF5
Message-ID: <SYZP282MB3189AD563EEA6DB6823BB719D97D2@SYZP282MB3189.AUSP282.PROD.OUTLOOK.COM>

Hi

I am trying to build GDAL from source from "release/3.9 branch".

I am bit confused about the HDF5 flags i need to pass if i want to enable the HDF5 support and also build the HDF5 drivers. I am using following flags BUT i still keep getting errors shown next

<arg value="-DHDF5_FIND_DEBUG=ON" /> ?????????????????????????????????????????????????????????????????
<arg value="-DHDF5_DIR=${unpack.dir}/hdf5" />???????????????????????????????????????????????????????????????
<arg value="-DHDF5_LIBRARIES=${unpack.dir}/hdf5/lib/hdf5.lib" /> ??????????????????????????????????????????????????????????????
<arg value="-DHDF5_C_LIBRARY=${unpack.dir}/hdf5/lib/hdf5.lib" /> ??????????????????????????????????????????????????????????????
<arg value="-DHDF5_HL_LIBRARY=${unpack.dir}/hdf5/lib/hdf5_hl.lib" /> ????????????????????????????????????????????????????????????????
<arg value="-DHDF5_INCLUDE_DIRS=${unpack.dir}/hdf5_copy/include"/>?????????????????????????????????????????????????????????????????
??????????<arg value="-DHDF5_C_INCLUDE_DIR=${unpack.dir}/hdf5/include" />





[INFO]      [exec] Call Stack (most recent call first):
[INFO]      [exec]   cmake/helpers/CheckDependentLibraries.cmake:609 (gdal_check_package)
[INFO]      [exec]   gdal.cmake:266 (include)
[INFO]      [exec] -- HDF5_DEFINITIONS: -DH5_BUILT_AS_DYNAMIC_LIB
[INFO]      [exec]   CMakeLists.txt:240 (include)
[INFO]      [exec]
[INFO]      [exec]
[INFO]      [exec] -- HDF5_INCLUDE_DIRS: C:\Source\gdal_39/dependencies/x64/hdf5_copy/include;C:/Source/gdal_39/dependencies/x64/hdf5/include
[INFO]      [exec] -- HDF5_LIBRARIES: C:\Source\gdal_39/dependencies/x64/hdf5/lib/hdf5.lib;C:Source\gdal_39/dependencies/x64/hdf5/lib/hdf5.lib;HDF5_hdf5_LIBRARY-NOTFOUND
[INFO]      [exec] -- HDF5_HL_LIBRARIES:
[INFO]      [exec] -- HDF5_C_DEFINITIONS:
[INFO]      [exec] -- HDF5_C_INCLUDE_DIR: C:/Source/gdal_39/dependencies/x64/hdf5/include
[INFO]      [exec] -- HDF5_C_INCLUDE_DIRS: C:/Source/gdal_39/dependencies/x64/hdf5/include
[INFO]      [exec] -- HDF5_C_LIBRARY: C:\Source\gdal_39/dependencies/x64/hdf5/lib/hdf5.lib
[INFO]      [exec] -- HDF5_C_LIBRARIES: C:\Source\gdal_39/dependencies/x64/hdf5/lib/hdf5.lib;HDF5_hdf5_LIBRARY-NOTFOUND
[INFO]      [exec] -- HDF5_C_HL_LIBRARY:
[INFO]      [exec] -- HDF5_C_HL_LIBRARIES:
[INFO]      [exec] -- Defined targets (if any):
[INFO]      [exec] -- Configuring incomplete, errors occurred!


Can anyone assist?

Best regards,

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241007/dac2fa2d/attachment.htm>

From mdsumner at gmail.com  Mon Oct  7 06:19:42 2024
From: mdsumner at gmail.com (Michael Sumner)
Date: Tue, 8 Oct 2024 00:19:42 +1100
Subject: [gdal-dev] writing arrow geometry
Message-ID: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>

When I investigate the schema in one of the test files

ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc

I see expected  list<polygons and list<rings and xy etc. I'm printing this
by using R nanoarrow::read_arrow, or from poLayer->GetArrowStream and I get
the same output:

<nanoarrow_array_stream struct<row_num: int32, geometry:
geoarrow.polygon{list<rings: list<vertices:
geoarrow.point{fixed_size_list(2)<xy: double>}>>}>>

If I write a new .arrow with GDAL

ogr2ogr ~/fromgdal.arrow
ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc

the stream schema looks like this:

<nanoarrow_array_stream struct<row_num: int32, geometry:
geoarrow.polygon{list<item: list<item: struct<x: double, y: double>>>}>>

and from nanoarrow I see

nanoarrow::read_nanoarrow("~/fromgdal.arrow")
Error in read_nanoarrow.character("~/fromgdal.arrow") :
  array_stream->get_schema(): [29] Expected >= 1330795077 bytes of
remaining data but found 2266 bytes in buffer

Are we in-between moves regarding specifications, or something?  I'm having
good results generally and this seems like a problem in the Arrow driver
for write.

Cheers, Mike


-- 
Michael Sumner
Research Software Engineer
Australian Antarctic Division
Hobart, Australia
e-mail: mdsumner at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/e838c14c/attachment-0001.htm>

From mdsumner at gmail.com  Mon Oct  7 06:23:48 2024
From: mdsumner at gmail.com (Michael Sumner)
Date: Tue, 8 Oct 2024 00:23:48 +1100
Subject: [gdal-dev] writing arrow geometry
In-Reply-To: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>
References: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>
Message-ID: <CAAcGz98S5Jw24ZYKWNhXuA9dgL1RWVd6oJ7oLrkq9mR4gfGsXQ@mail.gmail.com>

I realize I left out the INTERLEAVING, ie.

ogr2ogr ~/fromgdal.arrow
ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc -lco
GEOMETRY_ENCODING=GEOARROW_INTERLEAVED

but still, I get these list<item elements rather than their
rings/vertices/geoarrow.point type names:

<nanoarrow_array_stream struct<row_num: int32, geometry:
geoarrow.polygon{list<item: list<item: fixed_size_list(2)<xy: double>>>}>>



On Tue, Oct 8, 2024 at 12:19?AM Michael Sumner <mdsumner at gmail.com> wrote:

> When I investigate the schema in one of the test files
>
> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
>
> I see expected  list<polygons and list<rings and xy etc. I'm printing this
> by using R nanoarrow::read_arrow, or from poLayer->GetArrowStream and I get
> the same output:
>
> <nanoarrow_array_stream struct<row_num: int32, geometry:
> geoarrow.polygon{list<rings: list<vertices:
> geoarrow.point{fixed_size_list(2)<xy: double>}>>}>>
>
> If I write a new .arrow with GDAL
>
> ogr2ogr ~/fromgdal.arrow
> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
>
> the stream schema looks like this:
>
> <nanoarrow_array_stream struct<row_num: int32, geometry:
> geoarrow.polygon{list<item: list<item: struct<x: double, y: double>>>}>>
>
> and from nanoarrow I see
>
> nanoarrow::read_nanoarrow("~/fromgdal.arrow")
> Error in read_nanoarrow.character("~/fromgdal.arrow") :
>   array_stream->get_schema(): [29] Expected >= 1330795077 bytes of
> remaining data but found 2266 bytes in buffer
>
> Are we in-between moves regarding specifications, or something?  I'm
> having good results generally and this seems like a problem in the Arrow
> driver for write.
>
> Cheers, Mike
>
>
> --
> Michael Sumner
> Research Software Engineer
> Australian Antarctic Division
> Hobart, Australia
> e-mail: mdsumner at gmail.com
>


-- 
Michael Sumner
Research Software Engineer
Australian Antarctic Division
Hobart, Australia
e-mail: mdsumner at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/6b60c8dd/attachment.htm>

From even.rouault at spatialys.com  Mon Oct  7 06:39:37 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 7 Oct 2024 15:39:37 +0200
Subject: [gdal-dev] writing arrow geometry
In-Reply-To: <CAAcGz98S5Jw24ZYKWNhXuA9dgL1RWVd6oJ7oLrkq9mR4gfGsXQ@mail.gmail.com>
References: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>
 <CAAcGz98S5Jw24ZYKWNhXuA9dgL1RWVd6oJ7oLrkq9mR4gfGsXQ@mail.gmail.com>
Message-ID: <66613708-f4e3-4286-80a3-5492dcad2b73@spatialys.com>

Michael,

my understanding of https://geoarrow.org/format.html#memory-layouts is 
that what writes OGR is supposed to be fine since they mentionned types 
like '|List<List<FixedSizeList<double>[2]>>'|. Perhaps I've missed 
something or nanoarrow has stricter expectations? CC'ing Dewey Dunnington

Even

Le 07/10/2024 ? 15:23, Michael Sumner via gdal-dev a ?crit?:
> I realize I left out the INTERLEAVING, ie.
>
> ogr2ogr ~/fromgdal.arrow 
> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc -lco 
> GEOMETRY_ENCODING=GEOARROW_INTERLEAVED
>
> but still, I get these list<item elements rather than their 
> rings/vertices/geoarrow.point type names:
>
> <nanoarrow_array_stream struct<row_num: int32, geometry: 
> geoarrow.polygon{list<item: list<item: fixed_size_list(2)<xy: double>>>}>>
>
>
>
> On Tue, Oct 8, 2024 at 12:19?AM Michael Sumner <mdsumner at gmail.com> wrote:
>
>     When I investigate the schema in one of the test files
>
>     ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
>
>     I see expected? list<polygons and list<rings and xy etc. I'm
>     printing this by using R nanoarrow::read_arrow, or
>     from?poLayer->GetArrowStream and I get the same output:
>
>     <nanoarrow_array_stream struct<row_num: int32, geometry:
>     geoarrow.polygon{list<rings: list<vertices:
>     geoarrow.point{fixed_size_list(2)<xy: double>}>>}>>
>
>     If I write a new .arrow with GDAL
>
>     ogr2ogr ~/fromgdal.arrow
>     ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
>
>     the stream schema looks like this:
>
>     <nanoarrow_array_stream struct<row_num: int32, geometry:
>     geoarrow.polygon{list<item: list<item: struct<x: double, y:
>     double>>>}>>
>
>     and from nanoarrow I see
>
>     nanoarrow::read_nanoarrow("~/fromgdal.arrow")
>     Error in read_nanoarrow.character("~/fromgdal.arrow") :
>     ? array_stream->get_schema(): [29] Expected >= 1330795077 bytes of
>     remaining data but found 2266 bytes in buffer
>
>     Are we in-between moves regarding specifications, or something??
>     I'm having good results generally and this seems like a problem in
>     the Arrow driver for write.
>
>     Cheers, Mike
>
>
>     -- 
>     Michael Sumner
>     Research Software Engineer
>     Australian Antarctic Division
>     Hobart, Australia
>     e-mail: mdsumner at gmail.com
>
>
>
> -- 
> Michael Sumner
> Research Software Engineer
> Australian Antarctic Division
> Hobart, Australia
> e-mail: mdsumner at gmail.com
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241007/eab01f42/attachment.htm>

From jorisvandenbossche at gmail.com  Mon Oct  7 07:07:39 2024
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Mon, 7 Oct 2024 16:07:39 +0200
Subject: [gdal-dev] writing arrow geometry
In-Reply-To: <66613708-f4e3-4286-80a3-5492dcad2b73@spatialys.com>
References: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>
 <CAAcGz98S5Jw24ZYKWNhXuA9dgL1RWVd6oJ7oLrkq9mR4gfGsXQ@mail.gmail.com>
 <66613708-f4e3-4286-80a3-5492dcad2b73@spatialys.com>
Message-ID: <CAO9vTOwBd9-b4dVPZx8Fa7pM5WT3vKiU6NZ97bBDsD_HqhjbMw@mail.gmail.com>

The section about MultiPolygons at
https://geoarrow.org/format.html#memory-layouts mentions:

> The child name of the outer list should be ?polygons?; the child name of the middle list should be ?rings?; the child name of the inner list should be ?vertices?.

So this is currently phrased as a "should" and not "must" regarding
the list's field names, and so the data generated by GDAL is valid
under that description.

It might be good to verify with other consumers that those indeed can
handle such data (and add some test data with varying field names to
test against).

Joris

On Mon, 7 Oct 2024 at 15:39, Even Rouault via gdal-dev
<gdal-dev at lists.osgeo.org> wrote:
>
> Michael,
>
> my understanding of https://geoarrow.org/format.html#memory-layouts is that what writes OGR is supposed to be fine since they mentionned types like 'List<List<FixedSizeList<double>[2]>>'. Perhaps I've missed something or nanoarrow has stricter expectations? CC'ing Dewey Dunnington
>
> Even
>
> Le 07/10/2024 ? 15:23, Michael Sumner via gdal-dev a ?crit :
>
> I realize I left out the INTERLEAVING, ie.
>
> ogr2ogr ~/fromgdal.arrow ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc -lco GEOMETRY_ENCODING=GEOARROW_INTERLEAVED
>
> but still, I get these list<item elements rather than their rings/vertices/geoarrow.point type names:
>
> <nanoarrow_array_stream struct<row_num: int32, geometry: geoarrow.polygon{list<item: list<item: fixed_size_list(2)<xy: double>>>}>>
>
>
>
> On Tue, Oct 8, 2024 at 12:19?AM Michael Sumner <mdsumner at gmail.com> wrote:
>>
>> When I investigate the schema in one of the test files
>>
>> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
>>
>> I see expected  list<polygons and list<rings and xy etc. I'm printing this by using R nanoarrow::read_arrow, or from poLayer->GetArrowStream and I get the same output:
>>
>> <nanoarrow_array_stream struct<row_num: int32, geometry: geoarrow.polygon{list<rings: list<vertices: geoarrow.point{fixed_size_list(2)<xy: double>}>>}>>
>>
>> If I write a new .arrow with GDAL
>>
>> ogr2ogr ~/fromgdal.arrow ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
>>
>> the stream schema looks like this:
>>
>> <nanoarrow_array_stream struct<row_num: int32, geometry: geoarrow.polygon{list<item: list<item: struct<x: double, y: double>>>}>>
>>
>> and from nanoarrow I see
>>
>> nanoarrow::read_nanoarrow("~/fromgdal.arrow")
>> Error in read_nanoarrow.character("~/fromgdal.arrow") :
>>   array_stream->get_schema(): [29] Expected >= 1330795077 bytes of remaining data but found 2266 bytes in buffer
>>
>> Are we in-between moves regarding specifications, or something?  I'm having good results generally and this seems like a problem in the Arrow driver for write.
>>
>> Cheers, Mike
>>
>>
>> --
>> Michael Sumner
>> Research Software Engineer
>> Australian Antarctic Division
>> Hobart, Australia
>> e-mail: mdsumner at gmail.com
>
>
>
> --
> Michael Sumner
> Research Software Engineer
> Australian Antarctic Division
> Hobart, Australia
> e-mail: mdsumner at gmail.com
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev

From vautieri at geoweb3d.com  Mon Oct  7 07:50:17 2024
From: vautieri at geoweb3d.com (Vincent Autieri II)
Date: Mon, 7 Oct 2024 10:50:17 -0400
Subject: [gdal-dev] gdal-dev Digest, Vol 245, Issue 7
In-Reply-To: <mailman.1.1728241202.27523.gdal-dev@lists.osgeo.org>
References: <mailman.1.1728241202.27523.gdal-dev@lists.osgeo.org>
Message-ID: <CAPVN1Mv6cCSUjw_RutUd6Fa-KO2e-KEHD4Mk5BHc10VwhOQnSg@mail.gmail.com>

HELP  unsubscribe please

On Sun, Oct 6, 2024 at 3:00?PM <gdal-dev-request at lists.osgeo.org> wrote:

> Send gdal-dev mailing list submissions to
>         gdal-dev at lists.osgeo.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://lists.osgeo.org/mailman/listinfo/gdal-dev
> or, via email, send a message with subject or body 'help' to
>         gdal-dev-request at lists.osgeo.org
>
> You can reach the person managing the list at
>         gdal-dev-owner at lists.osgeo.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of gdal-dev digest..."
>
>
> Today's Topics:
>
>    1. What are vector field width and precision good for? (Sean Gillies)
>    2. Re: What are vector field width and precision good for?
>       (Even Rouault)
>    3. Re: What are vector field width and precision good for?
>       (Sean Gillies)
>    4. Re: What are vector field width and precision good for?
>       (Even Rouault)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Sat, 5 Oct 2024 16:38:14 -0600
> From: Sean Gillies <sean.gillies at gmail.com>
> To: gdal dev <gdal-dev at lists.osgeo.org>
> Subject: [gdal-dev] What are vector field width and precision good
>         for?
> Message-ID:
>         <CAOodmJo26kYqC=M_3PHNJwzK=
> 3Q0UdjLDZKxJg0JwwkNW5774A at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> Hi all,
>
> What are vector field width and precision good for in 2024? These concepts
> were inherited from MS Access via Shapefile, I believe. I've been wondering
> if I can stop supporting them in my Fiona project without breaking
> workflows badly. Numpy data types don't have width and precision. Neither
> do, for example, Parquet and Arrow.
>
> Anybody using these for anything crucial?
>
> --
> Sean Gillies
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241005/1495d2c5/attachment-0001.htm
> >
>
> ------------------------------
>
> Message: 2
> Date: Sun, 6 Oct 2024 00:48:09 +0200
> From: Even Rouault <even.rouault at spatialys.com>
> To: Sean Gillies <sean.gillies at gmail.com>, gdal dev
>         <gdal-dev at lists.osgeo.org>
> Subject: Re: [gdal-dev] What are vector field width and precision good
>         for?
> Message-ID: <bcdc66c7-6002-41c3-96bb-0498e2c738ba at spatialys.com>
> Content-Type: text/plain; charset=UTF-8; format=flowed
>
> Sean,
>
> > What are vector field width and precision good for in 2024? These
> > concepts were inherited from MS Access via Shapefile, I believe. I've
> > been wondering if I can stop supporting them in my Fiona project
> > without breaking workflows badly. Numpy data types don't have width
> > and precision. Neither do, for example, Parquet and Arrow.
> >
> > Anybody using these for anything crucial?
>
> If Fiona had only a read side you could likely ignore them.? But writing
> all those formats (shapefile, mapinfo, etc.) require setting those
> properties. If you don't specify them, the OGR drivers will use some
> defaults, that might not always be appropriate.
>
> Even
>
> --
>
> http://www.spatialys.com
> My software is free, but my time generally not.
>
>
>
> ------------------------------
>
> Message: 3
> Date: Sat, 5 Oct 2024 17:32:18 -0600
> From: Sean Gillies <sean.gillies at gmail.com>
> To: gdal dev <gdal-dev at lists.osgeo.org>
> Subject: Re: [gdal-dev] What are vector field width and precision good
>         for?
> Message-ID:
>         <
> CAOodmJocW4yVShE_yacvUMFyLfo04p0oToB+Zzoevt1AsZJr0w at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> Even,
>
> Would the defaults result in overly large attribute files? By a small
> amount or an excessive amount? Or would the defaults result in truncation
> of values?
>
> On Sat, Oct 5, 2024 at 4:48?PM Even Rouault <even.rouault at spatialys.com>
> wrote:
>
> > Sean,
> >
> > > What are vector field width and precision good for in 2024? These
> > > concepts were inherited from MS Access via Shapefile, I believe. I've
> > > been wondering if I can stop supporting them in my Fiona project
> > > without breaking workflows badly. Numpy data types don't have width
> > > and precision. Neither do, for example, Parquet and Arrow.
> > >
> > > Anybody using these for anything crucial?
> >
> > If Fiona had only a read side you could likely ignore them.  But writing
> > all those formats (shapefile, mapinfo, etc.) require setting those
> > properties. If you don't specify them, the OGR drivers will use some
> > defaults, that might not always be appropriate.
> >
> > Even
> >
>
>
> --
> Sean Gillies
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241005/b4c449ad/attachment-0001.htm
> >
>
> ------------------------------
>
> Message: 4
> Date: Sun, 6 Oct 2024 11:19:35 +0200
> From: Even Rouault <even.rouault at spatialys.com>
> To: Sean Gillies <sean.gillies at gmail.com>, gdal dev
>         <gdal-dev at lists.osgeo.org>
> Subject: Re: [gdal-dev] What are vector field width and precision good
>         for?
> Message-ID: <a4668df8-5d70-49fe-be5a-f57ee09980bf at spatialys.com>
> Content-Type: text/plain; charset=UTF-8; format=flowed
>
> Sean,
> >
> > Would the defaults result in overly large attribute files? By a small
> > amount or an excessive amount? Or would the defaults result in
> > truncation of values?
>
> For shapefile the default is width=24,precision=15,so this means 24
> bytes for every floating point number. In theory a number couldn't have
> a magnitude larger than 10^(24-15-1), but the shapefile driver will
> remove decimal figures if that's needed to preserve the integer part.
> But if a number is larger than 10^24, its last digits will just be
> truncated with a warning (there's no good solution here. I kind of
> remember of past discussions if we shouldn't fallback to scientific
> notation, but we didn't implement that). In that situation, the user
> would have to increase the width (one can question the appropriateness
> of using Shapefile .dbf for numbers of very large magnitude). So
> basically the default should be fine (as far as preserving information
> is concerned) for most common ranges of floating point numbers, but will
> misbehave for very large ones. Obviously for people storing small
> numbers with few decimals, 24 might be felt as excessive.
>
> For MapInfo I was actually partially incorrect. It has indeed a mode of
> fixed precision, but if you don't specify the width, it uses IEEE754
> double precision for .tab, et a non-fixed width text representation for
> .mif.
>
> Shapefiles are (probably) the only format OGR handles on the writing
> side that require, explicit or implict, width.precision (PostGIS or
> other databases are similar to MapInfo and support both fixed
> width/precision and floating-point)
>
> Even
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>
>
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
>
> ------------------------------
>
> End of gdal-dev Digest, Vol 245, Issue 7
> ****************************************
>


-- 
*Vincent Autieri*
Vice President Co-Founder, Geoweb3d Inc.
607-323-1114 <607-731-3904> | vautieri at geoweb3d.com |
http://www.geoweb3d.com

IMPORTANT: The contents of this email and any attachments are confidential.
They are intended for the named recipient(s) only. If you have received
this email by mistake, please notify the sender immediately and do not
disclose the contents to anyone or make copies thereof.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241007/965c0edd/attachment-0001.htm>

From mdsumner at gmail.com  Mon Oct  7 07:51:07 2024
From: mdsumner at gmail.com (Michael Sumner)
Date: Tue, 8 Oct 2024 01:51:07 +1100
Subject: [gdal-dev] writing arrow geometry
In-Reply-To: <CAFb7qScF2-jY_7yt7uBRzzNFym6qndGm7FGjQxmcapDyavKGWg@mail.gmail.com>
References: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>
 <CAAcGz98S5Jw24ZYKWNhXuA9dgL1RWVd6oJ7oLrkq9mR4gfGsXQ@mail.gmail.com>
 <66613708-f4e3-4286-80a3-5492dcad2b73@spatialys.com>
 <CAO9vTOwBd9-b4dVPZx8Fa7pM5WT3vKiU6NZ97bBDsD_HqhjbMw@mail.gmail.com>
 <CAFb7qScF2-jY_7yt7uBRzzNFym6qndGm7FGjQxmcapDyavKGWg@mail.gmail.com>
Message-ID: <CAAcGz98e2VU5Cj7Gb_zUev2wA8NGfr=A60TX1B0E3f5w_0vQ1Q@mail.gmail.com>

Thanks Dewey!  That does indeed fix it.


ogr2ogr ~/fromgdal.arrows
ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc  ## using
*.arrows triggers same as -lco FORMAT=STREAM

then in R

nanoarrow::read_nanoarrow("~/fromgdal.arrows")
<nanoarrow_array_stream struct<row_num: int32, geometry:
geoarrow.polygon{list<item: list<item: struct<x: double, y: double>>>}>>

I had even toyed with the FORMAT=FILE/STREAM and the .arrows extension ...
but was a bit lost about what to expect.

Thanks all, Mike



On Tue, Oct 8, 2024 at 1:34?AM Dewey Dunnington <dewey at voltrondata.com>
wrote:

> Thank you Michael for the report and Even for the heads up!
>
> On nanoarrow's end, I believe that what's happening here is that
> Michael wrote an arrow "file" and then attempted to read with
> nanoarrow's IPC reader (which only reads streams). I believe that
> `ogr2ogr ~/fromgdal.arrow` -> `ogr2ogr ~/fromgdal.arrows` (note the s
> suffix) would write an IPC stream.
>
> (As a note, both Joris and I attempted to retain the more informative
> name "feather" for "Arrow files" to avoid this type of confusion).
>
> Let me know if that does not work!
>
> Cheers,
>
> -dewey
>
> On Mon, Oct 7, 2024 at 9:07?AM Joris Van den Bossche
> <jorisvandenbossche at gmail.com> wrote:
> >
> > The section about MultiPolygons at
> > https://geoarrow.org/format.html#memory-layouts mentions:
> >
> > > The child name of the outer list should be ?polygons?; the child name
> of the middle list should be ?rings?; the child name of the inner list
> should be ?vertices?.
> >
> > So this is currently phrased as a "should" and not "must" regarding
> > the list's field names, and so the data generated by GDAL is valid
> > under that description.
> >
> > It might be good to verify with other consumers that those indeed can
> > handle such data (and add some test data with varying field names to
> > test against).
> >
> > Joris
> >
> > On Mon, 7 Oct 2024 at 15:39, Even Rouault via gdal-dev
> > <gdal-dev at lists.osgeo.org> wrote:
> > >
> > > Michael,
> > >
> > > my understanding of https://geoarrow.org/format.html#memory-layouts
> is that what writes OGR is supposed to be fine since they mentionned types
> like 'List<List<FixedSizeList<double>[2]>>'. Perhaps I've missed something
> or nanoarrow has stricter expectations? CC'ing Dewey Dunnington
> > >
> > > Even
> > >
> > > Le 07/10/2024 ? 15:23, Michael Sumner via gdal-dev a ?crit :
> > >
> > > I realize I left out the INTERLEAVING, ie.
> > >
> > > ogr2ogr ~/fromgdal.arrow
> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc -lco
> GEOMETRY_ENCODING=GEOARROW_INTERLEAVED
> > >
> > > but still, I get these list<item elements rather than their
> rings/vertices/geoarrow.point type names:
> > >
> > > <nanoarrow_array_stream struct<row_num: int32, geometry:
> geoarrow.polygon{list<item: list<item: fixed_size_list(2)<xy: double>>>}>>
> > >
> > >
> > >
> > > On Tue, Oct 8, 2024 at 12:19?AM Michael Sumner <mdsumner at gmail.com>
> wrote:
> > >>
> > >> When I investigate the schema in one of the test files
> > >>
> > >> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
> > >>
> > >> I see expected  list<polygons and list<rings and xy etc. I'm printing
> this by using R nanoarrow::read_arrow, or from poLayer->GetArrowStream and
> I get the same output:
> > >>
> > >> <nanoarrow_array_stream struct<row_num: int32, geometry:
> geoarrow.polygon{list<rings: list<vertices:
> geoarrow.point{fixed_size_list(2)<xy: double>}>>}>>
> > >>
> > >> If I write a new .arrow with GDAL
> > >>
> > >> ogr2ogr ~/fromgdal.arrow
> ogr/data/arrow/from_paleolimbot_geoarrow/polygon-default.ipc
> > >>
> > >> the stream schema looks like this:
> > >>
> > >> <nanoarrow_array_stream struct<row_num: int32, geometry:
> geoarrow.polygon{list<item: list<item: struct<x: double, y: double>>>}>>
> > >>
> > >> and from nanoarrow I see
> > >>
> > >> nanoarrow::read_nanoarrow("~/fromgdal.arrow")
> > >> Error in read_nanoarrow.character("~/fromgdal.arrow") :
> > >>   array_stream->get_schema(): [29] Expected >= 1330795077 bytes of
> remaining data but found 2266 bytes in buffer
> > >>
> > >> Are we in-between moves regarding specifications, or something?  I'm
> having good results generally and this seems like a problem in the Arrow
> driver for write.
> > >>
> > >> Cheers, Mike
> > >>
> > >>
> > >> --
> > >> Michael Sumner
> > >> Research Software Engineer
> > >> Australian Antarctic Division
> > >> Hobart, Australia
> > >> e-mail: mdsumner at gmail.com
> > >
> > >
> > >
> > > --
> > > Michael Sumner
> > > Research Software Engineer
> > > Australian Antarctic Division
> > > Hobart, Australia
> > > e-mail: mdsumner at gmail.com
> > >
> > > _______________________________________________
> > > gdal-dev mailing list
> > > gdal-dev at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/gdal-dev
> > >
> > > --
> > > http://www.spatialys.com
> > > My software is free, but my time generally not.
> > >
> > > _______________________________________________
> > > gdal-dev mailing list
> > > gdal-dev at lists.osgeo.org
> > > https://lists.osgeo.org/mailman/listinfo/gdal-dev
>


-- 
Michael Sumner
Research Software Engineer
Australian Antarctic Division
Hobart, Australia
e-mail: mdsumner at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/5c8005a7/attachment.htm>

From even.rouault at spatialys.com  Mon Oct  7 09:32:14 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 7 Oct 2024 18:32:14 +0200
Subject: [gdal-dev] GDAL 3.9.3 release candidate available
Message-ID: <db9644cd-fd63-46a4-a791-843e63a382e2@spatialys.com>

Hi,

I have prepared a GDAL/OGR 3.9.3 release candidate.

Pick up an archive among the following ones (by ascending size):

 ? https://download.osgeo.org/gdal/3.9.3/gdal-3.9.3rc1.tar.xz
 ? https://download.osgeo.org/gdal/3.9.3/gdal-3.9.3rc1.tar.gz
 ? https://download.osgeo.org/gdal/3.9.3/gdal393rc1.zip

A snapshot of the gdalautotest suite is also available:

https://download.osgeo.org/gdal/3.9.3/gdalautotest-3.9.3rc1.tar.gz
 ? https://download.osgeo.org/gdal/3.9.3/gdalautotest-3.9.3rc1.zip

The NEWS file is here:

 ? https://github.com/OSGeo/gdal/blob/v3.9.3RC1/NEWS.md

I'll call for a vote to approve it later this week if no critical issues 
have been reported before.

Best regards,

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From even.rouault at spatialys.com  Mon Oct  7 09:38:44 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 7 Oct 2024 18:38:44 +0200
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use of)
 generative AI tools
Message-ID: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>

Hi,

I propose we update RFC 8 with the following changes: 
https://github.com/OSGeo/gdal/pull/10958

Can we enforce that? No (similarly we can't prevent someone from 
stealing copyrighted material from source code of proprietary software 
they have access to, or "re-license" or "forget" copyright attribution 
of open source code without authorization), but at least we set the policy.

This is admittedly a highly controversial topic. Debian for example has 
had related discussions but didn't come with a position for now, whereas 
Gentoo banned use of generative AI: https://lwn.net/Articles/972331/

It seems more prudent to me to ban for now, and potentially relax in the 
future, when/if the legal status of this becomes clearer. (not even 
mentioning the ethical or environmental impact sides of such tools)

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From j1 at jimenezshaw.com  Mon Oct  7 10:29:16 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Mon, 7 Oct 2024 19:29:16 +0200
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
Message-ID: <CADRrdKsmThoTNHBVnzfavxz0N8jePNs_q69sBk65g239DM9Ggg@mail.gmail.com>

Sounds good to me

On Mon, 7 Oct 2024, 18:38 Even Rouault via gdal-dev, <
gdal-dev at lists.osgeo.org> wrote:

> Hi,
>
> I propose we update RFC 8 with the following changes:
> https://github.com/OSGeo/gdal/pull/10958
>
> Can we enforce that? No (similarly we can't prevent someone from
> stealing copyrighted material from source code of proprietary software
> they have access to, or "re-license" or "forget" copyright attribution
> of open source code without authorization), but at least we set the policy.
>
> This is admittedly a highly controversial topic. Debian for example has
> had related discussions but didn't come with a position for now, whereas
> Gentoo banned use of generative AI: https://lwn.net/Articles/972331/
>
> It seems more prudent to me to ban for now, and potentially relax in the
> future, when/if the legal status of this becomes clearer. (not even
> mentioning the ethical or environmental impact sides of such tools)
>
> Even
>
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241007/0ce775dd/attachment.htm>

From even.rouault at spatialys.com  Mon Oct  7 15:37:44 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 8 Oct 2024 00:37:44 +0200
Subject: [gdal-dev] writing arrow geometry
In-Reply-To: <CAO9vTOwBd9-b4dVPZx8Fa7pM5WT3vKiU6NZ97bBDsD_HqhjbMw@mail.gmail.com>
References: <CAAcGz9-yhQorF=G7nZff+Fbvv+n7G6THDLwa8r3jt7jJe3kPCw@mail.gmail.com>
 <CAAcGz98S5Jw24ZYKWNhXuA9dgL1RWVd6oJ7oLrkq9mR4gfGsXQ@mail.gmail.com>
 <66613708-f4e3-4286-80a3-5492dcad2b73@spatialys.com>
 <CAO9vTOwBd9-b4dVPZx8Fa7pM5WT3vKiU6NZ97bBDsD_HqhjbMw@mail.gmail.com>
Message-ID: <75308c8e-e84f-425f-8819-2e473782b8f8@spatialys.com>

Joris,
>> The child name of the outer list should be ?polygons?; the child name of the middle list should be ?rings?; the child name of the inner list should be ?vertices?.

Thanks for pointing that out. Should be fixed per 
https://github.com/OSGeo/gdal/pull/10962

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/cb95c0a1/attachment.htm>

From even.rouault at spatialys.com  Mon Oct  7 16:31:49 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 8 Oct 2024 01:31:49 +0200
Subject: [gdal-dev] "Thanks" page in our documentation
Message-ID: <3c61ceeb-d807-4091-97a7-353306fc38a5@spatialys.com>

Hi,

I feel we were missing a "thanks" page in our documentation. We had one 
in the static HTML version of the web site, prior to the migration to 
Sphinx, although it was already a bit outdated. Hence I'm proposing 
https://github.com/OSGeo/gdal/pull/10963 , partly based on the content 
of the past version of the page, and updating it.

This is a tricky exercise and I've perhaps forgotten to mention people 
that should be credited. Please contact me (preferably off-list) if 
you'd like to be credited or if you believe someone should be credited. 
And also if you don't want to be listed or if you want information about 
you to be modified.

Best regards,

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From elpaso at itopen.it  Tue Oct  8 00:15:36 2024
From: elpaso at itopen.it (ElPaso)
Date: Tue, 8 Oct 2024 09:15:36 +0200
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
Message-ID: <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>

Il 07/10/24 18:38, Even Rouault via gdal-dev ha scritto:
> Hi,
>
> I propose we update RFC 8 with the following changes: 
> https://github.com/OSGeo/gdal/pull/10958
>
> Can we enforce that? No (similarly we can't prevent someone from 
> stealing copyrighted material from source code of proprietary software 
> they have access to, or "re-license" or "forget" copyright attribution 
> of open source code without authorization), but at least we set the 
> policy.
>
> This is admittedly a highly controversial topic. Debian for example 
> has had related discussions but didn't come with a position for now, 
> whereas Gentoo banned use of generative AI: 
> https://lwn.net/Articles/972331/
>
> It seems more prudent to me to ban for now, and potentially relax in 
> the future, when/if the legal status of this becomes clearer. (not 
> even mentioning the ethical or environmental impact sides of such tools)
>
> Even
>

Hi Even,


I have read the discussion on lwn and I must say that I am more in line 
with the debian position.


I find it ironic that as an open source developer who probably 
contributed a lot of training material to feed the AI model I myself am 
banned to use it.


At the moment I am using copilot as a cut-and-paste on steroids and it 
has improved my efficiency, to me it is no different than copying and 
pasting from another file in the GDAL source code or going to SO to 
search how to write a complex recursive lambda implementation in C++11, 
cut the example and paste in GDAL. Note that in both cases the 
copied/pasted or generated code will need careful review and adaptations.


-- 
Alessandro Pasotti
w3: www.itopen.it


From lnicola at dend.ro  Tue Oct  8 00:41:55 2024
From: lnicola at dend.ro (=?UTF-8?Q?Lauren=C8=9Biu_Nicola?=)
Date: Tue, 08 Oct 2024 10:41:55 +0300
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
Message-ID: <11f56bda-251f-4452-97fc-51b5f3074c2c@betaapp.fastmail.com>

Hi,

> At the moment I am using copilot as a cut-and-paste on steroids and it 
> has improved my efficiency, to me it is no different than copying and 
> pasting from another file in the GDAL source code or going to SO to 
> search how to write a complex recursive lambda implementation in C++11, 
> cut the example and paste in GDAL. Note that in both cases the 
> copied/pasted or generated code will need careful review and adaptations.

I think it's worth mentioning that code taken from SO is licensed under CC-BY-SA, so it needs at least proper attribution. Looking at the GDAL codebase, I counted about 21 stackoverflow.com URLs, the vast majority of those added by Even, according to git blame. So either Even is almost the only GDAL contributor that uses Stack Overflow, or this might already be a problem.

Not to mention that a link in the source code might not be sufficient for attribution, especially if you're shipping binaries etc.

Laurentiu

From runette at gmail.com  Tue Oct  8 02:31:04 2024
From: runette at gmail.com (Paul Harwood)
Date: Tue, 8 Oct 2024 10:31:04 +0100
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <11f56bda-251f-4452-97fc-51b5f3074c2c@betaapp.fastmail.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
 <11f56bda-251f-4452-97fc-51b5f3074c2c@betaapp.fastmail.com>
Message-ID: <CAE8nN5Pe8afCa-dqG3hP7uBGxE=HrsTag=Lya1XovvG4AW_JRw@mail.gmail.com>

IANAL - however I have looked at a lot of these things in my time.

The phrase "use of generative AI tools to contribute copyrighted material
is prohibited" is ambiguous (and actually nugatory):

- for clarity - it should say that it is prohibited to use such tools to
contribute *to the project* otherwise you are making a general
statement about the law.

- the contribution of (unattributed) copyright code is (presumable)
forbidden regardless of the tools and anyway - that provides a loophole
that anyone can say "I was not contributing copyright code - I had a
reasonable lack of awareness of the status of the code" which is anyway the
grey area you are addressing. It should probably say that the use of
generative AI tools is prohibited without reference to rights of the case.

- The user has a great deal of uncertainty about whether they are using GAI
- when using VS it makes a lot of code suggestions. I do not know whether
they are created by GAI.

Therefore - I might suggest something more like :

"the intentional use of generative AI tools to contribute to the GDAL
project is prohibited"

Paul

On Tue, 8 Oct 2024 at 08:42, Lauren?iu Nicola via gdal-dev <
gdal-dev at lists.osgeo.org> wrote:

> Hi,
>
> > At the moment I am using copilot as a cut-and-paste on steroids and it
> > has improved my efficiency, to me it is no different than copying and
> > pasting from another file in the GDAL source code or going to SO to
> > search how to write a complex recursive lambda implementation in C++11,
> > cut the example and paste in GDAL. Note that in both cases the
> > copied/pasted or generated code will need careful review and adaptations.
>
> I think it's worth mentioning that code taken from SO is licensed under
> CC-BY-SA, so it needs at least proper attribution. Looking at the GDAL
> codebase, I counted about 21 stackoverflow.com URLs, the vast majority of
> those added by Even, according to git blame. So either Even is almost the
> only GDAL contributor that uses Stack Overflow, or this might already be a
> problem.
>
> Not to mention that a link in the source code might not be sufficient for
> attribution, especially if you're shipping binaries etc.
>
> Laurentiu
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/5e43fb0f/attachment.htm>

From runette at gmail.com  Tue Oct  8 03:02:10 2024
From: runette at gmail.com (Paul Harwood)
Date: Tue, 8 Oct 2024 11:02:10 +0100
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <CAE8nN5Pe8afCa-dqG3hP7uBGxE=HrsTag=Lya1XovvG4AW_JRw@mail.gmail.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
 <11f56bda-251f-4452-97fc-51b5f3074c2c@betaapp.fastmail.com>
 <CAE8nN5Pe8afCa-dqG3hP7uBGxE=HrsTag=Lya1XovvG4AW_JRw@mail.gmail.com>
Message-ID: <CAE8nN5NhfQuE21ZsV6m3XRQUDvT+wuCztpe=E1Va2Q1v3ANs=A@mail.gmail.com>

While I am at it - the stuff about "changes that are not subject to
copyright law" is meaningless - copyright applies to content and not to
changes and I doubt there is any content on GDAL that is NOT subject to
copyright law.

I would humbly suggest that the question is more about whether
"corrections" such as spelling and grammar (and possible syntax and style
in code) are "generative".

I would suggest that the following might be better

"the use of AI to make corrections such as fixing spelling, grammar, syntax
and style mistakes may be acceptable"

I have left the "may" in there but I would be happier with it "is
acceptable" - "may" is a worrying word.

On Tue, 8 Oct 2024 at 10:31, Paul Harwood <runette at gmail.com> wrote:

> IANAL - however I have looked at a lot of these things in my time.
>
> The phrase "use of generative AI tools to contribute copyrighted material
> is prohibited" is ambiguous (and actually nugatory):
>
> - for clarity - it should say that it is prohibited to use such tools to
> contribute *to the project* otherwise you are making a general
> statement about the law.
>
> - the contribution of (unattributed) copyright code is (presumable)
> forbidden regardless of the tools and anyway - that provides a loophole
> that anyone can say "I was not contributing copyright code - I had a
> reasonable lack of awareness of the status of the code" which is anyway the
> grey area you are addressing. It should probably say that the use of
> generative AI tools is prohibited without reference to rights of the case.
>
> - The user has a great deal of uncertainty about whether they are using
> GAI - when using VS it makes a lot of code suggestions. I do not know
> whether they are created by GAI.
>
> Therefore - I might suggest something more like :
>
> "the intentional use of generative AI tools to contribute to the GDAL
> project is prohibited"
>
> Paul
>
> On Tue, 8 Oct 2024 at 08:42, Lauren?iu Nicola via gdal-dev <
> gdal-dev at lists.osgeo.org> wrote:
>
>> Hi,
>>
>> > At the moment I am using copilot as a cut-and-paste on steroids and it
>> > has improved my efficiency, to me it is no different than copying and
>> > pasting from another file in the GDAL source code or going to SO to
>> > search how to write a complex recursive lambda implementation in C++11,
>> > cut the example and paste in GDAL. Note that in both cases the
>> > copied/pasted or generated code will need careful review and
>> adaptations.
>>
>> I think it's worth mentioning that code taken from SO is licensed under
>> CC-BY-SA, so it needs at least proper attribution. Looking at the GDAL
>> codebase, I counted about 21 stackoverflow.com URLs, the vast majority
>> of those added by Even, according to git blame. So either Even is almost
>> the only GDAL contributor that uses Stack Overflow, or this might already
>> be a problem.
>>
>> Not to mention that a link in the source code might not be sufficient for
>> attribution, especially if you're shipping binaries etc.
>>
>> Laurentiu
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/c54ec0f7/attachment-0001.htm>

From howard at hobu.co  Tue Oct  8 09:14:02 2024
From: howard at hobu.co (Howard Butler)
Date: Tue, 8 Oct 2024 11:14:02 -0500
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
Message-ID: <E9FD3565-49C4-45C0-A94B-CB53C19D5107@hobu.co>



> On Oct 7, 2024, at 11:38?AM, Even Rouault via gdal-dev <gdal-dev at lists.osgeo.org> wrote:
> 
> Hi,
> 
> I propose we update RFC 8 with the following changes: https://github.com/OSGeo/gdal/pull/10958
> 
> Can we enforce that? No (similarly we can't prevent someone from stealing copyrighted material from source code of proprietary software they have access to, or "re-license" or "forget" copyright attribution of open source code without authorization), but at least we set the policy.
> 
> This is admittedly a highly controversial topic. Debian for example has had related discussions but didn't come with a position for now, whereas Gentoo banned use of generative AI: https://lwn.net/Articles/972331/
> 
> It seems more prudent to me to ban for now, and potentially relax in the future, when/if the legal status of this becomes clearer. (not even mentioning the ethical or environmental impact sides of such tools)
> 
> Even

I wonder if the policy should be to require any contributions that use generative AI *be labeled as such*. This would serve two purposes ? it would allow us to react to contributions that would be problematic to include and it would allow us to preserve those labels in the codebase for any of the contributions for future users of the software.

It is always the responsibility of the users of the software to be aware of the copyright implications of their use of the software. The project should do its best to give users the tools to know the status of the software in regard to where code that is included originated. 

As to how to functionally implement it, maybe a simple tag on PRs that users must check ("did you use copilot or similar when making this PR?" and then some kind of automation that push that tag into the changeset history when it is merged. 

Howard

From jan.heckman at gmail.com  Tue Oct  8 10:35:13 2024
From: jan.heckman at gmail.com (Jan Heckman)
Date: Tue, 8 Oct 2024 19:35:13 +0200
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <E9FD3565-49C4-45C0-A94B-CB53C19D5107@hobu.co>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <E9FD3565-49C4-45C0-A94B-CB53C19D5107@hobu.co>
Message-ID: <CAKMUAtBmthNHZbCo45jVZ2Vf9DAQdwK6C=MRc_SB9DnWfc-D7w@mail.gmail.com>

Sorry to butt in.
I have no say in this whatsoever.
A few mayhaps/perby useful points:
- not using GAI is not a lasting option, so rather focus on precautions and
be aware of dangers.
Prime danger, to me, seams copyright trolling ala Oracle. They have
bought/adopted stuff in order to sue people.
Of course, GDAL is not rich enough to profit, but reputation damage is also
to be avoided.
Precaution would be rewrite with gdal naming convention, see whether the
usually general code can be more specific to the context.
Another weird idea: perhaps you can ask your copilot or whatever GAI
whether copyrighted material is involved. Experimental, wishful thinking,
Don't know yet.
Suppose you get a positive answer, then do a strong rewrite or do not use
at all.
Sometimes framing your questions in a slightly more general way may help
you without too much copy paste.
- SO. identifying each successful SO inquiry can be quite obnoxious.
Can you persuade SO into a simpler agreement?
I am thinking of decorating all modules with an SO mention and
adding an option to each (ogrinfo, ogr2ogr etc) executable: --credits.
Hardly have to explain more, I guess. If you do, mention --credits in
--help.
I have no suggestion for RFC8, except the general tone: don't use unless,
which is already there.
And the final advice to anyone would be: do not just copy-paste.
I'll show myself out ?

On Tue, Oct 8, 2024 at 6:21?PM Howard Butler via gdal-dev <
gdal-dev at lists.osgeo.org> wrote:

>
>
> > On Oct 7, 2024, at 11:38?AM, Even Rouault via gdal-dev <
> gdal-dev at lists.osgeo.org> wrote:
> >
> > Hi,
> >
> > I propose we update RFC 8 with the following changes:
> https://github.com/OSGeo/gdal/pull/10958
> >
> > Can we enforce that? No (similarly we can't prevent someone from
> stealing copyrighted material from source code of proprietary software they
> have access to, or "re-license" or "forget" copyright attribution of open
> source code without authorization), but at least we set the policy.
> >
> > This is admittedly a highly controversial topic. Debian for example has
> had related discussions but didn't come with a position for now, whereas
> Gentoo banned use of generative AI: https://lwn.net/Articles/972331/
> >
> > It seems more prudent to me to ban for now, and potentially relax in the
> future, when/if the legal status of this becomes clearer. (not even
> mentioning the ethical or environmental impact sides of such tools)
> >
> > Even
>
> I wonder if the policy should be to require any contributions that use
> generative AI *be labeled as such*. This would serve two purposes ? it
> would allow us to react to contributions that would be problematic to
> include and it would allow us to preserve those labels in the codebase for
> any of the contributions for future users of the software.
>
> It is always the responsibility of the users of the software to be aware
> of the copyright implications of their use of the software. The project
> should do its best to give users the tools to know the status of the
> software in regard to where code that is included originated.
>
> As to how to functionally implement it, maybe a simple tag on PRs that
> users must check ("did you use copilot or similar when making this PR?" and
> then some kind of automation that push that tag into the changeset history
> when it is merged.
>
> Howard
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241008/8066946b/attachment.htm>

From gdt at lexort.com  Tue Oct  8 15:55:18 2024
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 08 Oct 2024 18:55:18 -0400
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it> (ElPaso via
 gdal-dev's message of "Tue, 8 Oct 2024 09:15:36 +0200")
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
Message-ID: <rmi7caidx2h.fsf@s1.lexort.com>

ElPaso via gdal-dev <gdal-dev at lists.osgeo.org> writes:

> I have read the discussion on lwn and I must say that I am more in
> line with the debian position.

My view is that code that comes out of generative AI should be viewed as
an improper derived work, and lacking adequate provenance/permission to
be added to an open source project, period.  As Even says, we could
relax this in the future.  It's very difficult to go back and remove
things.

> I find it ironic that as an open source developer who probably
> contributed a lot of training material to feed the AI model I myself
> am banned to use it.

It's not ironic; it's taking the high moral ground and acting
responsibly.  You haven't "contributed" so much as AI companies have
taken code under licenses and used that code to create derived works in
violation of those licenses, ignoring the share alike and attribution
requirements.

In my view the only reasonable approach for the open source community is
to shun bad behavior entirely.

From andrew at aitchison.me.uk  Tue Oct  8 19:08:45 2024
From: andrew at aitchison.me.uk (Andrew C Aitchison)
Date: Wed, 9 Oct 2024 03:08:45 +0100 (BST)
Subject: [gdal-dev] Github, AI and the proposed RFC 8 amendment
In-Reply-To: <rmi7caidx2h.fsf@s1.lexort.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
 <rmi7caidx2h.fsf@s1.lexort.com>
Message-ID: <470c7dd7-a156-270c-f87d-c3468066779d@aitchison.me.uk>

On Tue, 8 Oct 2024, Greg Troxel via gdal-dev wrote:

> ElPaso via gdal-dev <gdal-dev at lists.osgeo.org> writes:
>> I find it ironic that as an open source developer who probably
>> contributed a lot of training material to feed the AI model I myself
>> am banned to use it.
>
> It's not ironic; it's taking the high moral ground and acting
> responsibly.  You haven't "contributed" so much as AI companies have
> taken code under licenses and used that code to create derived works in
> violation of those licenses, ignoring the share alike and attribution
> requirements.
>
> In my view the only reasonable approach for the open source community is
> to shun bad behavior entirely.

Agreed.

However, as I understand it, by using github we have allowed
copilot to include our code without it being covered by the usual
licence.

I don't like that, but we don't seem to be talking about
looking for an alternative hosting site.

Actually, if gdal includes other code under one of the open source
licences, are *we* violating that licence by putting it on github and
allowing it to be used in copilot.

-- 
Andrew C. Aitchison                      Kendal, UK
                    andrew at aitchison.me.uk

From elpaso at itopen.it  Tue Oct  8 23:58:24 2024
From: elpaso at itopen.it (ElPaso)
Date: Wed, 9 Oct 2024 08:58:24 +0200
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <rmi7caidx2h.fsf@s1.lexort.com>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
 <rmi7caidx2h.fsf@s1.lexort.com>
Message-ID: <16764a53-be56-4ecd-8224-9b39b53a8b11@itopen.it>

Il 09/10/24 00:55, Greg Troxel via gdal-dev ha scritto:
> ElPaso via gdal-dev <gdal-dev at lists.osgeo.org> writes:
>
>> I have read the discussion on lwn and I must say that I am more in
>> line with the debian position.
> My view is that code that comes out of generative AI should be viewed as
> an improper derived work, and lacking adequate provenance/permission to
> be added to an open source project, period.  As Even says, we could
> relax this in the future.  It's very difficult to go back and remove
> things.


This may be true in some circumstances but that's not what I have seen 
so far using copilot wih GDAL: most of the times what it does for me 
much faster than me is cut-and-paste-replace or autocomplete taking code 
from other parts of GDAL or most frequently from other parts of the same 
file that I am editing, for example, when I was changing? ogrlineref to 
use gdalargumentparser, after manually changing the first part of the file

https://github.com/OSGeo/gdal/pull/10147/files#diff-b906434b9e6a52aef54e0894ba43a7202290b1af4964cc5d9f1ec8ae7a1c4e15R1271

the AI was very useful to autocomplete the other command line switches 
(one by one, not all of them), I had to change/edit almost everything 
but the scaffolding was there, the source of the autocomplete was 
obviously GDAL itself.


Where is the copyright issue in this use case?


Another situation where I find it useful is when writing tests: most of 
the times tests are boring boilerplate code to construct the test data, 
for example: the next line here was generate from the comment

https://github.com/qgis/QGIS/pull/58986/files#diff-8eebd3707bdc54c42ecd1a2abfca8f623a4c6a8c44c89f344a6762fe95a95059R4682 


also the checks were automatically generated after I entered the first 
couple (they are essentially a copy-paste), the source is QGIS itself.


That said I agree that when an AI will be smart enough to be able to be 
"creative" (I know, hard to define what it exactly is, but a one-line 
cut-paste-replace from the same code base certainly isn't) we will have 
a problem to define who/what is the author of the code.


Perhaps we could find a way to allow the limited use of AI tools as 
autocompleters as long as the source of the generated material is 
obviously the code base itself (for instance when using the GDAL API).


-- 
Alessandro Pasotti
w3: www.itopen.it


From jan.heckman at gmail.com  Wed Oct  9 02:17:25 2024
From: jan.heckman at gmail.com (Jan Heckman)
Date: Wed, 9 Oct 2024 11:17:25 +0200
Subject: [gdal-dev] Proposed RFC 8 amendment regarding (prohibited use
 of) generative AI tools
In-Reply-To: <16764a53-be56-4ecd-8224-9b39b53a8b11@itopen.it>
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
 <rmi7caidx2h.fsf@s1.lexort.com>
 <16764a53-be56-4ecd-8224-9b39b53a8b11@itopen.it>
Message-ID: <CAKMUAtAE_eZKZWBw2dg+QTQkODy+K8_gm82cZf_O21k+FjWfjw@mail.gmail.com>

Some reading
<https://thenewstack.io/whats-wrong-with-generative-ai-driven-development-right-now/>
.

On Wed, Oct 9, 2024 at 9:11?AM ElPaso via gdal-dev <gdal-dev at lists.osgeo.org>
wrote:

> Il 09/10/24 00:55, Greg Troxel via gdal-dev ha scritto:
> > ElPaso via gdal-dev <gdal-dev at lists.osgeo.org> writes:
> >
> >> I have read the discussion on lwn and I must say that I am more in
> >> line with the debian position.
> > My view is that code that comes out of generative AI should be viewed as
> > an improper derived work, and lacking adequate provenance/permission to
> > be added to an open source project, period.  As Even says, we could
> > relax this in the future.  It's very difficult to go back and remove
> > things.
>
>
> This may be true in some circumstances but that's not what I have seen
> so far using copilot wih GDAL: most of the times what it does for me
> much faster than me is cut-and-paste-replace or autocomplete taking code
> from other parts of GDAL or most frequently from other parts of the same
> file that I am editing, for example, when I was changing  ogrlineref to
> use gdalargumentparser, after manually changing the first part of the file
>
>
> https://github.com/OSGeo/gdal/pull/10147/files#diff-b906434b9e6a52aef54e0894ba43a7202290b1af4964cc5d9f1ec8ae7a1c4e15R1271
>
> the AI was very useful to autocomplete the other command line switches
> (one by one, not all of them), I had to change/edit almost everything
> but the scaffolding was there, the source of the autocomplete was
> obviously GDAL itself.
>
>
> Where is the copyright issue in this use case?
>
>
> Another situation where I find it useful is when writing tests: most of
> the times tests are boring boilerplate code to construct the test data,
> for example: the next line here was generate from the comment
>
>
> https://github.com/qgis/QGIS/pull/58986/files#diff-8eebd3707bdc54c42ecd1a2abfca8f623a4c6a8c44c89f344a6762fe95a95059R4682
>
>
> also the checks were automatically generated after I entered the first
> couple (they are essentially a copy-paste), the source is QGIS itself.
>
>
> That said I agree that when an AI will be smart enough to be able to be
> "creative" (I know, hard to define what it exactly is, but a one-line
> cut-paste-replace from the same code base certainly isn't) we will have
> a problem to define who/what is the author of the code.
>
>
> Perhaps we could find a way to allow the limited use of AI tools as
> autocompleters as long as the source of the generated material is
> obviously the code base itself (for instance when using the GDAL API).
>
>
> --
> Alessandro Pasotti
> w3: www.itopen.it
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241009/40b2b505/attachment.htm>

From gdt at lexort.com  Wed Oct  9 05:43:49 2024
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 09 Oct 2024 08:43:49 -0400
Subject: [gdal-dev] Github, AI and the proposed RFC 8 amendment
In-Reply-To: <470c7dd7-a156-270c-f87d-c3468066779d@aitchison.me.uk> (Andrew
 C. Aitchison via gdal-dev's message of "Wed, 9 Oct 2024 03:08:45 +0100
 (BST)")
References: <229e8f61-b925-45b6-87a7-4b0842e942ab@spatialys.com>
 <ff3ddf97-eb55-4f76-8037-451d0e36a16a@itopen.it>
 <rmi7caidx2h.fsf@s1.lexort.com>
 <470c7dd7-a156-270c-f87d-c3468066779d@aitchison.me.uk>
Message-ID: <rmied4pbg56.fsf@s1.lexort.com>

Andrew C Aitchison via gdal-dev <gdal-dev at lists.osgeo.org> writes:

> Agreed.
>
> However, as I understand it, by using github we have allowed
> copilot to include our code without it being covered by the usual
> licence.

Perhaps "acquiesced", but the project does not have to right to grant
hat license for code whose copyright is held by others.

> I don't like that, but we don't seem to be talking about
> looking for an alternative hosting site.

That's another problem; everyone using github should have an open ticket
to manage to leave.  (I know it's hard.)

> Actually, if gdal includes other code under one of the open source
> licences, are *we* violating that licence by putting it on github and
> allowing it to be used in copilot.

yes.

From even.rouault at spatialys.com  Wed Oct  9 09:12:03 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 9 Oct 2024 18:12:03 +0200
Subject: [gdal-dev] [PROJ] RFC 102: Embedding resource files into
 libgdal (and PROJ)
In-Reply-To: <e4135b06-7ea6-4fa4-8517-5397a91af49a@spatialys.com>
References: <89145acc-0b4a-4518-97e9-aefe0f3d7eda@spatialys.com>
 <rmied4zoi5k.fsf@s1.lexort.com>
 <aa98ed68-663b-4a8c-be45-dc2fb89293fb@spatialys.com>
 <CACmBxyuvWsnPCPSwnPyvVS8YbY0VNPSQL6_4u51Ed6z3_khSSw@mail.gmail.com>
 <e4135b06-7ea6-4fa4-8517-5397a91af49a@spatialys.com>
Message-ID: <eb391c26-7b6a-4f7c-a2a8-89ef8129b242@spatialys.com>

Hi,

Proposed implementations are, as far as I can tell, feature complete now 
(including docs & CI):

- GDAL: https://github.com/OSGeo/gdal/pull/10972 . I propose that we 
target 3.11. We are probably too close to the feature freeze of 3.10 and 
would otherwise need to rush things, which feels unnecessary.

- PROJ: https://github.com/OSGeo/PROJ/pull/4265 . Embedding has also 
been extended to proj.ini , in addition to proj.db (both available in 
non-C23 or C23 modes)

I've also updated the RFC text to reflect the current state of things.

I let more time for people to review before submitting to vote, probably 
end of next week (as usual, tell if you need more time)

Even

Le 03/10/2024 ? 19:30, Even Rouault via PROJ a ?crit?:
> Hi,
>
> I've now a PROJ branch with proj.db embedding working at 
> https://github.com/OSGeo/PROJ/pull/4265. And contrary to the current 
> wording of the RFC text, I've actually invested in making it work with 
> non-C23 compilers too (C23 mechanism used when available), by adapting 
> https://gitlab.com/jhamberg/cmake-examples/-/blob/master/cmake/FileEmbed.cmake 
> and optimizing it because its performance at generating a .c file from 
> a binary was not acceptable on multi-megabyte large files like 
> proj.db.? Non-C23 embedding works fine with older gcc, clang, MSVC. 
> The proj_db.c generation from proj.db runs in 8 seconds, and building 
> it with gcc in 18 seconds (looking at build times in CI, that seems to 
> be fast with MSVC too)
>
> But I won't (probably) support non-C23 embedding for GDAL: that would 
> be too much complication w.r.t benefit. Only a "few" GDAL drivers need 
> resource files, whereas access to proj.db is a strong requirement.
>
> Kurt, I had to modify the memOpen() and the memvfs_init() functions of 
> the https://www.sqlite.org/src/doc/tip/ext/misc/memvfs.c (I did other 
> changes in memvfs_init() to avoid making it the default VFS, and 
> registering it per db-connection to avoid a global registration), 
> otherwise some complex SQL requests that require creating a temporary 
> file wouldn't work, such as the ones of 'bin/projinfo --list-crs' or 
> 'bin/cct "this is a bogus CRS meant to trigger a syntax error in 
> proj_create"'? (with sqlite 3.46 of fedora:rawhide). Is it something 
> you ran into? Cf the changes in memvfs.c in 
> https://github.com/rouault/PROJ/commit/e7fcf162f6968c48587836f537b506708112e7d4
>
> With those changes, ctest pass
>
> Even
>
>
> http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From Darren.Boss at gov.bc.ca  Wed Oct  9 12:18:04 2024
From: Darren.Boss at gov.bc.ca (Boss, Darren WLRS:EX)
Date: Wed, 9 Oct 2024 19:18:04 +0000
Subject: [gdal-dev] Invalid search_path created in ogrpgdatasource.cpp
Message-ID: <YT3P288MB0160528083A4F703C6E661A6AA7E2@YT3P288MB0160.CANP288.PROD.OUTLOOK.COM>

I have a Python back-end that uses gdal.Warp to clip a GeoTiff using a geometry from a Postgres 14 (with PostGIS) table. I set up the gdal.warpOptions and pass them into gdal.warp as follows:

DB_READ_STRING = "postgresql://{read_user}:{postgres_password}@{postgres_read_host}:{postgres_port}/{postgres_database}"
warp_options = gdal.WarpOptions(format="GTiff", cutlineDSName=DB_READ_STRING, cutlineSQL=f"SELECT geom FROM my_table WHERE id=1", cropToCutline=True)
res = gdal.Warp(output_path, my_raster, options=warp_options)

This has been working great with gdal 3.4 in a K8s cluster running in a private cloud using an Ubuntu 20 base image. I?m in the process of updating to an Ubuntu 24 LTS image which will be using gdal 3.8.4 and running into problems where the table name (my_table) in the cutlineSQL can?t be found. The problem seems to be related to the search_path and the changes made in this PR: https://github.com/OSGeo/gdal/pull/8642

I turned ON the CPL_DEBUG flag and see the following when trying to perform the warp:

PG: Client encoding: 'UTF8'
PG: PostGIS schema: 'public'
PG: Modifying search_path from "" to '',"",'public'
PG: Command "SET search_path='',"",'public'" failed. Trying without 'public'.

I managed to narrow down the source of the issue and workaround the problem but I think there is room for improvement in gdal.

I narrowed the problem down to ogrpgdatasource.cpp which executes a query (SHOW search_path) to retrieve the search_path. In my case the search_path being returned was an empty string (or maybe it was a string containing a pair of double quotes like ???? or NULL, I?m not sure). The code in ogrpgdatasource.cpp would then create a new search_path with three comma separated values: ??, ??, public. Gdal then tries to set this as the search_path and postgres complains about the empty string with double quotes.

SET search_path=??,??,public
ERROR:  zero-length delimited identifier at or near """"

It looks like the issue stemmed from the fact that the user specified in the connection string does not have an associated schema. The workaround in my case was to create a matching schema and explicitly set the search path for my user to ?$user?,public. Simply setting the search_path to $user/public for my role or user was insufficient, I needed the schema and also had to grant usage on the new schema to the appropriate role. Setting the search path on the database was also insufficient to resolve the issue. Here?s the debug output now:

PG: Client encoding: 'UTF8'
PG: PostGIS schema: 'public'
PG: Modifying search_path from "$user", public to '',"$user", public

So yes, there was likely a configuration issue in my crunchyDB cluster, but my question is, would gdal?s creation of an invalid search_path with the inclusion of an empty, double quoted string be considered a bug from your point-of-view? The empty, single quoted string that gdal adds to the search_path also seems odd but doesn?t appear to cause any issues.

I?m happy to create a new issue in GitHub if you feel this is an issue.

Thanks,

Darren Boss
Lead Full Stack Developer, Development & Digital Services
Water, Land & Resource Stewardship | NRIDS
Darren.Boss at gov.bc.ca<mailto:Darren.Boss at gov.bc.ca>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241009/d6ee3a57/attachment.htm>

From even.rouault at spatialys.com  Wed Oct  9 13:12:39 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 9 Oct 2024 22:12:39 +0200
Subject: [gdal-dev] Invalid search_path created in ogrpgdatasource.cpp
In-Reply-To: <YT3P288MB0160528083A4F703C6E661A6AA7E2@YT3P288MB0160.CANP288.PROD.OUTLOOK.COM>
References: <YT3P288MB0160528083A4F703C6E661A6AA7E2@YT3P288MB0160.CANP288.PROD.OUTLOOK.COM>
Message-ID: <e4180973-45c5-40f4-8cea-55fcf2984792@spatialys.com>

Darren,

thanks for the report. I could indeed reproducing setting first an empty 
search path (single quote single quote)

alter role {my_user_name} set search_path='';

Fix in https://github.com/OSGeo/gdal/pull/10980

Even

Le 09/10/2024 ? 21:18, Boss, Darren WLRS:EX via gdal-dev a ?crit?:
>
> I have a Python back-end that uses gdal.Warp to clip a GeoTiff using a 
> geometry from a Postgres 14 (with PostGIS) table. I set up the 
> gdal.warpOptions and pass them into gdal.warp as follows:
>
> DB_READ_STRING = 
> "postgresql://{read_user}:{postgres_password}@{postgres_read_host}:{postgres_port}/{postgres_database}"
>
> warp_options = gdal.WarpOptions(format="GTiff", 
> cutlineDSName=DB_READ_STRING, cutlineSQL=f"SELECT geom FROM my_table 
> WHERE id=1", cropToCutline=True)
>
> res = gdal.Warp(output_path, my_raster, options=warp_options)
>
> This has been working great with gdal 3.4 in a K8s cluster running in 
> a private cloud using an Ubuntu 20 base image. I?m in the process of 
> updating to an Ubuntu 24 LTS image which will be using gdal 3.8.4 and 
> running into problems where the table name (my_table) in the 
> cutlineSQL can?t be found. The problem seems to be related to the 
> search_path and the changes made in this PR: 
> https://github.com/OSGeo/gdal/pull/8642
>
> I turned ON the CPL_DEBUG flag and see the following when trying to 
> perform the warp:
>
> PG: Client encoding: 'UTF8'
>
> PG: PostGIS schema: 'public'
>
> PG: Modifying search_path from "" to '',"",'public'
>
> PG: Command "SET search_path='',"",'public'" failed. Trying without 
> 'public'.
>
> I managed to narrow down the source of the issue and workaround the 
> problem but I think there is room for improvement in gdal.
>
> I narrowed the problem down to ogrpgdatasource.cpp which executes a 
> query (SHOW search_path) to retrieve the search_path. In my case the 
> search_path being returned was an empty string (or maybe it was a 
> string containing a pair of double quotes like ???? or NULL, I?m not 
> sure). The code in ogrpgdatasource.cpp would then create a new 
> search_path with three comma separated values: ??, ??, public. Gdal 
> then tries to set this as the search_path and postgres complains about 
> the empty string with double quotes.
>
> SET search_path=??,??,public
>
> ERROR:? zero-length delimited identifier at or near """"
>
> It looks like the issue stemmed from the fact that the user specified 
> in the connection string does not have an associated schema. The 
> workaround in my case was to create a matching schema and explicitly 
> set the search path for my user to ?$user?,public. Simply setting the 
> search_path to $user/public for my role or user was insufficient, I 
> needed the schema and also had to grant usage on the new schema to the 
> appropriate role. Setting the search path on the database was also 
> insufficient to resolve the issue. Here?s the debug output now:
>
> PG: Client encoding: 'UTF8'
>
> PG: PostGIS schema: 'public'
>
> PG: Modifying search_path from "$user", public to '',"$user", public
>
> So yes, there was likely a configuration issue in my crunchyDB 
> cluster, but my question is, would gdal?s creation of an invalid 
> search_path with the inclusion of an empty, double quoted string be 
> considered a bug from your point-of-view? The empty, single quoted 
> string that gdal adds to the search_path also seems odd but doesn?t 
> appear to cause any issues.
>
> I?m happy to create a new issue in GitHub if you feel this is an issue.
>
> Thanks,
>
> Darren Boss
>
> Lead Full Stack Developer, Development & Digital Services
>
> Water, Land & Resource Stewardship | NRIDS
>
> Darren.Boss at gov.bc.ca <mailto:Darren.Boss at gov.bc.ca>
>
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241009/88b58775/attachment-0001.htm>

From even.rouault at spatialys.com  Thu Oct 10 06:33:57 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 10 Oct 2024 15:33:57 +0200
Subject: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
Message-ID: <e87db1f3-92f7-4bbf-bf72-51d2afc58196@spatialys.com>

Hi,

Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release

Starting with my +1

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From jukka.rahkonen at maanmittauslaitos.fi  Thu Oct 10 06:35:46 2024
From: jukka.rahkonen at maanmittauslaitos.fi (Rahkonen Jukka)
Date: Thu, 10 Oct 2024 13:35:46 +0000
Subject: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
In-Reply-To: <e87db1f3-92f7-4bbf-bf72-51d2afc58196@spatialys.com>
References: <e87db1f3-92f7-4bbf-bf72-51d2afc58196@spatialys.com>
Message-ID: <DB9PR09MB68873AFDE4129F6B039348DFFD782@DB9PR09MB6887.eurprd09.prod.outlook.com>

+1

-Jukka Rahkonen-

-----Alkuper?inen viesti-----
L?hett?j?: gdal-dev <gdal-dev-bounces at lists.osgeo.org> Puolesta Even Rouault via gdal-dev
L?hetetty: torstai 10. lokakuuta 2024 16.34
Vastaanottaja: gdal-dev at lists.osgeo.org
Aihe: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release

Hi,

Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release

Starting with my +1

Even


From jack at openclimatefix.org  Fri Oct 11 03:55:12 2024
From: jack at openclimatefix.org (Jack Kelly)
Date: Fri, 11 Oct 2024 12:55:12 +0200
Subject: [gdal-dev] Split out GDAL's GRIB2 tables as a separate repository?
Message-ID: <CAPEORokZ5gMKrfc6ZKYUfEg7ncZ5p57u_ETr05-BpeLthKQTdw@mail.gmail.com>

Dear GDAL devs,

The directory gdal/frmts/grib/data/ contains the most comprehensive
collection of GRIB2 code tables in a machine-readable format that I'm
aware of! Thank you so much for creating this resource. It's a huge
help!

If possible, I'd love to use these CSV GRIB2 tables in two open-source
GRIB2 projects that I'm collaborating on: gribberish[1] and
hypergrib[2].

In the short term, would it be acceptable to the GDAL devs for me to
copy these CSV files into a new git repository (with some Rust code
that reads the CSV files and provides a simple Rust API to the GRIB
tables)? I'd include a README that explains that the CSV files came
from GDAL, and that I can't take any credit for the CSV files, and
that any tweaks to the CSV files should be submitted to GDAL (to avoid
the copied CSV files diverging from GDAL's).

Longer term, would it make sense to move GDAL's CSV GRIB2 tables &
related Python code into a separate OSGeo github repository that GDAL
and other GRIB2 readers could depend on? (No worries if not! I
appreciate that you're very busy. I'm just keen to avoid copying the
CSV files. But, if you're happy for me to copy the CSV files, then
maybe there's less need to split the CSV files out from GDAL).

Many thanks,
Jack

P.S. I'm afraid I may not be of much help in splitting the CSV files
from GDAL because my knowledge of C++ and cmake is very very rusty!

References
1. https://github.com/mpiannucci/gribberish
2. https://github.com/JackKelly/hypergrib

From even.rouault at spatialys.com  Fri Oct 11 05:04:42 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 11 Oct 2024 14:04:42 +0200
Subject: [gdal-dev] Split out GDAL's GRIB2 tables as a separate
 repository?
In-Reply-To: <CAPEORokZ5gMKrfc6ZKYUfEg7ncZ5p57u_ETr05-BpeLthKQTdw@mail.gmail.com>
References: <CAPEORokZ5gMKrfc6ZKYUfEg7ncZ5p57u_ETr05-BpeLthKQTdw@mail.gmail.com>
Message-ID: <81c88476-82d8-43dd-8522-3fb4b65568b2@spatialys.com>

Jack,

~ 90% of the credit for those tables belongs to WMO Information 
Management, as they essentially come from 
https://github.com/wmo-im/GRIB2 (under MIT license)

The GDAL version of those tables is a mixture of those WMO tables + NOAA 
NCEP specific tables that extend the WMO ones here and there.

https://github.com/OSGeo/gdal/blob/master/frmts/grib/degrib/README.TXT 
explains the process we apply to do that. The gist is this script 
https://github.com/OSGeo/gdal/blob/master/frmts/grib/degrib/merge_degrib_and_wmo_tables.py

So essentially what you are seeking for is probably just the original 
WMO .csv tables from?https://github.com/wmo-im/GRIB2 . But feel free to 
use the ones of GDAL (under MIT license too), or extract the above 
mentionned script and its input files in a dedicated repository. I'm 
happy if someone else regularly does this refresh & merge operation when 
WMO issue a new release and if I can just copy & paste the output

Even

Le 11/10/2024 ? 12:55, Jack Kelly via gdal-dev a ?crit?:
> Dear GDAL devs,
>
> The directory gdal/frmts/grib/data/ contains the most comprehensive
> collection of GRIB2 code tables in a machine-readable format that I'm
> aware of! Thank you so much for creating this resource. It's a huge
> help!
>
> If possible, I'd love to use these CSV GRIB2 tables in two open-source
> GRIB2 projects that I'm collaborating on: gribberish[1] and
> hypergrib[2].
>
> In the short term, would it be acceptable to the GDAL devs for me to
> copy these CSV files into a new git repository (with some Rust code
> that reads the CSV files and provides a simple Rust API to the GRIB
> tables)? I'd include a README that explains that the CSV files came
> from GDAL, and that I can't take any credit for the CSV files, and
> that any tweaks to the CSV files should be submitted to GDAL (to avoid
> the copied CSV files diverging from GDAL's).
>
> Longer term, would it make sense to move GDAL's CSV GRIB2 tables &
> related Python code into a separate OSGeo github repository that GDAL
> and other GRIB2 readers could depend on? (No worries if not! I
> appreciate that you're very busy. I'm just keen to avoid copying the
> CSV files. But, if you're happy for me to copy the CSV files, then
> maybe there's less need to split the CSV files out from GDAL).
>
> Many thanks,
> Jack
>
> P.S. I'm afraid I may not be of much help in splitting the CSV files
> from GDAL because my knowledge of C++ and cmake is very very rusty!
>
> References
> 1. https://github.com/mpiannucci/gribberish
> 2. https://github.com/JackKelly/hypergrib
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev

-- 
http://www.spatialys.com
My software is free, but my time generally not.
Mostly a fool, sometimes acting like a professional (or vice versa)


From j1 at jimenezshaw.com  Fri Oct 11 06:00:23 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Fri, 11 Oct 2024 15:00:23 +0200
Subject: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
In-Reply-To: <DB9PR09MB68873AFDE4129F6B039348DFFD782@DB9PR09MB6887.eurprd09.prod.outlook.com>
References: <e87db1f3-92f7-4bbf-bf72-51d2afc58196@spatialys.com>
 <DB9PR09MB68873AFDE4129F6B039348DFFD782@DB9PR09MB6887.eurprd09.prod.outlook.com>
Message-ID: <CADRrdKuNmixAOFQkKdUbKwBfRsBJxDfi3PNVNH-=7JZ_Fdc08A@mail.gmail.com>

+1 Javier

On Thu, 10 Oct 2024 at 15:36, Rahkonen Jukka via gdal-dev <
gdal-dev at lists.osgeo.org> wrote:

> +1
>
> -Jukka Rahkonen-
>
> -----Alkuper?inen viesti-----
> L?hett?j?: gdal-dev <gdal-dev-bounces at lists.osgeo.org> Puolesta Even
> Rouault via gdal-dev
> L?hetetty: torstai 10. lokakuuta 2024 16.34
> Vastaanottaja: gdal-dev at lists.osgeo.org
> Aihe: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
>
> Hi,
>
> Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
>
> Starting with my +1
>
> Even
>
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241011/0536a8de/attachment.htm>

From jack at openclimatefix.org  Fri Oct 11 21:24:02 2024
From: jack at openclimatefix.org (Jack Kelly)
Date: Sat, 12 Oct 2024 06:24:02 +0200
Subject: [gdal-dev] Split out GDAL's GRIB2 tables as a separate
 repository?
In-Reply-To: <81c88476-82d8-43dd-8522-3fb4b65568b2@spatialys.com>
References: <CAPEORokZ5gMKrfc6ZKYUfEg7ncZ5p57u_ETr05-BpeLthKQTdw@mail.gmail.com>
 <81c88476-82d8-43dd-8522-3fb4b65568b2@spatialys.com>
Message-ID: <CAPEORokq1Qri4=jvyHjTS3-osqPqAkzQA0FCxTQn9c1MRJCwNQ@mail.gmail.com>

Dear Even,

Thank you for your very quick reply!

We're keen to use the NOAA NCEP grib tables, so the GDAL CSV files are
perfect for us!

I could definitely see myself taking responsibility for updating the
grib tables. But, before I commit, let's wait a few months to see how
my pet GRIB project progresses :)

Thanks again,
Jack

From howard at hobu.co  Sat Oct 12 11:09:27 2024
From: howard at hobu.co (Howard Butler)
Date: Sat, 12 Oct 2024 13:09:27 -0500
Subject: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
In-Reply-To: <CADRrdKuNmixAOFQkKdUbKwBfRsBJxDfi3PNVNH-=7JZ_Fdc08A@mail.gmail.com>
References: <e87db1f3-92f7-4bbf-bf72-51d2afc58196@spatialys.com>
 <DB9PR09MB68873AFDE4129F6B039348DFFD782@DB9PR09MB6887.eurprd09.prod.outlook.com>
 <CADRrdKuNmixAOFQkKdUbKwBfRsBJxDfi3PNVNH-=7JZ_Fdc08A@mail.gmail.com>
Message-ID: <299BE6A2-4584-4AAA-A182-FF552066C57D@hobu.co>

+1 Howard

> On Oct 11, 2024, at 8:00?AM, Javier Jimenez Shaw via gdal-dev <gdal-dev at lists.osgeo.org> wrote:
> 
> +1 Javier
> 
> On Thu, 10 Oct 2024 at 15:36, Rahkonen Jukka via gdal-dev <gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>> wrote:
>> +1
>> 
>> -Jukka Rahkonen-
>> 
>> -----Alkuper?inen viesti-----
>> L?hett?j?: gdal-dev <gdal-dev-bounces at lists.osgeo.org <mailto:gdal-dev-bounces at lists.osgeo.org>> Puolesta Even Rouault via gdal-dev
>> L?hetetty: torstai 10. lokakuuta 2024 16.34
>> Vastaanottaja: gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>
>> Aihe: [gdal-dev] Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
>> 
>> Hi,
>> 
>> Motion: approve GDAL 3.9.3 RC1 as 3.9.3 release
>> 
>> Starting with my +1
>> 
>> Even
>> 
>> _______________________________________________
>> gdal-dev mailing list
>> gdal-dev at lists.osgeo.org <mailto:gdal-dev at lists.osgeo.org>
>> https://lists.osgeo.org/mailman/listinfo/gdal-dev
> _______________________________________________
> gdal-dev mailing list
> gdal-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/gdal-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/gdal-dev/attachments/20241012/28b388af/attachment.htm>

From mentaljam119 at gmail.com  Sun Oct 13 11:28:29 2024
From: mentaljam119 at gmail.com (Petr Tsymbarovich)
Date: Sun, 13 Oct 2024 21:28:29 +0300
Subject: [gdal-dev] GDAL Windows Wheels
In-Reply-To: <6aa830d4-db7f-405f-a784-5d052bf6b970@gmail.com>
References: <6aa830d4-db7f-405f-a784-5d052bf6b970@gmail.com>
Message-ID: <c324b4f3-3d31-4678-872c-5e79d3b1cc09@gmail.com>

Hi,

I have added pipelines for building wheels for manylinux and musllinux, 
and renamed the repository to https://gitlab.com/mentaljam/gdal-wheels 
(not only Windows). You are welcome to test it!

Best regards, Petr

17.09.2024 14:31, Petr Tsymbarovich ?????:
> Hi,
>
> Long story short: I've configured a GitLab pipeline for building and 
> publishing
> GDAL wheels for Python on Windows 
> (https://gitlab.com/mentaljam/gdal-windows-wheels).
> The approach uses cibuildwheel and delvewheel to include DLLs in the 
> wheels and
> it is partly borrowed from Rasterio GitHub Actions. The wheels are 
> available at
> GitLab Python package registry 
> (https://gitlab.com/mentaljam/gdal-windows-wheels/-/packages).
> More information and usage examples can be found in the README.md.
>
> I hope someone would find this useful!
>
> Best regards, Petr

